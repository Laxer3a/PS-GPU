// megafunction wizard: %LPM_DIVIDE%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: LPM_DIVIDE 

// ============================================================
// File Name: div6.v
// Megafunction Name(s):
// 			LPM_DIVIDE
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 18.1.0 Build 625 09/12/2018 SJ Lite Edition
// ************************************************************


//Copyright (C) 2018  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details.


//lpm_divide DEVICE_FAMILY="Cyclone V" LPM_DREPRESENTATION="SIGNED" LPM_NREPRESENTATION="SIGNED" LPM_PIPELINE=6 LPM_REMAINDERPOSITIVE="FALSE" LPM_WIDTHD=22 LPM_WIDTHN=32 MAXIMIZE_SPEED=6 clock denom numer quotient remain
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_abs 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_divide 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//abs_divider DEN_REPRESENTATION="SIGNED" LPM_PIPELINE=6 MAXIMIZE_SPEED=6 NUM_REPRESENTATION="SIGNED" SKIP_BITS=0 WIDTH_D=22 WIDTH_N=32 clock denominator numerator quotient remainder
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_abs 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_divide 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


//alt_u_div DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=6 MAXIMIZE_SPEED=6 SKIP_BITS=0 WIDTH_D=22 WIDTH_N=32 WIDTH_Q=32 WIDTH_R=22 clock denominator numerator quotient remainder
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_abs 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_divide 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=1 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=2 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=11 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=12 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=13 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=14 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=15 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=16 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=17 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=18 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=19 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=20 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=3 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=21 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=22 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=23 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=23 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=23 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=23 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=23 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=23 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=23 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=23 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=4 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=23 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=23 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=5 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=6 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=7 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=8 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = lut 515 reg 654 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to DFFDenominator[0]} POWER_UP_LEVEL=HIGH;{-to DFFDenominator[1]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[2]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[3]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[4]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[5]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[6]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[7]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[8]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[9]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[10]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[11]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[12]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[13]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[14]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[15]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[16]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[17]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[18]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[19]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[20]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[21]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[22]} POWER_UP_LEVEL=HIGH;{-to DFFDenominator[23]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[24]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[25]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[26]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[27]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[28]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[29]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[30]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[31]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[32]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[33]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[34]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[35]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[36]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[37]} POWER_UP_LEVEL=LOW;",
		"{-to DFFDenominator[38]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[39]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[40]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[41]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[42]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[43]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[44]} POWER_UP_LEVEL=HIGH;{-to DFFDenominator[45]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[46]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[47]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[48]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[49]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[50]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[51]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[52]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[53]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[54]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[55]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[56]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[57]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[58]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[59]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[60]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[61]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[62]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[63]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[64]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[65]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[66]} POWER_UP_LEVEL=HIGH;{-to DFFDenominator[67]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[68]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[69]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[70]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[71]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[72]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[73]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[74]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[75]} POWER_UP_LEVEL=LOW;",
		"{-to DFFDenominator[76]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[77]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[78]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[79]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[80]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[81]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[82]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[83]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[84]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[85]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[86]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[87]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[88]} POWER_UP_LEVEL=HIGH;{-to DFFDenominator[89]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[90]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[91]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[92]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[93]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[94]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[95]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[96]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[97]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[98]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[99]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[100]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[101]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[102]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[103]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[104]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[105]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[106]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[107]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[108]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[109]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[110]} POWER_UP_LEVEL=HIGH;{-to DFFDenominator[111]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[112]} POWER_UP_LEVEL=LOW;",
		"{-to DFFDenominator[113]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[114]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[115]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[116]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[117]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[118]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[119]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[120]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[121]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[122]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[123]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[124]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[125]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[126]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[127]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[128]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[129]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[130]} POWER_UP_LEVEL=LOW;{-to DFFDenominator[131]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[0]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[1]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[2]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[3]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[4]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[5]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[6]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[7]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[8]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[9]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[10]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[11]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[12]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[13]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[14]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[15]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[16]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[17]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[18]} POWER_UP_LEVEL=HIGH;",
		"{-to DFFQuotient[19]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[20]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[21]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[22]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[23]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[24]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[25]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[26]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[27]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[28]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[29]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[30]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[31]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[32]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[33]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[34]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[35]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[36]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[37]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[38]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[39]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[40]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[41]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[42]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[43]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[44]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[45]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[46]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[47]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[48]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[49]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[50]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[51]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[52]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[53]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[54]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[55]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[56]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[57]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[58]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[59]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[60]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[61]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[62]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[63]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[64]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[65]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[66]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[67]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[68]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[69]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[70]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[71]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[72]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[73]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[74]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[75]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[76]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[77]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[78]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[79]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[80]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[81]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[82]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[83]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[84]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[85]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[86]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[87]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[88]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[89]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[90]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[91]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[92]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[93]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[94]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[95]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[96]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[97]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[98]} POWER_UP_LEVEL=HIGH;",
		"{-to DFFQuotient[99]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[100]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[101]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[102]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[103]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[104]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[105]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[106]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[107]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[108]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[109]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[110]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[111]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[112]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[113]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[114]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[115]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[116]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[117]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[118]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[119]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[120]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[121]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[122]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[123]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[124]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[125]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[126]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[127]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[128]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[129]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[130]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[131]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[132]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[133]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[134]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[135]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[136]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[137]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[138]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[139]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[140]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[141]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[142]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[143]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[144]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[145]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[146]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[147]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[148]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[149]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[150]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[151]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[152]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[153]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[154]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[155]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[156]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[157]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[158]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[159]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[160]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[161]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[162]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[163]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[164]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[165]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[166]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[167]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[168]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[169]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[170]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[171]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[172]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[173]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[174]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[175]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[176]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[177]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[178]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[179]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[180]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[181]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[182]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[183]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[184]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[185]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[186]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[187]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[188]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[189]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[190]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[191]} POWER_UP_LEVEL=LOW"} *)
module  div6_alt_u_div
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [21:0]  denominator;
	input   [31:0]  numerator;
	output   [31:0]  quotient;
	output   [21:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[131:0]	wire_DFFDenominator_d;
	reg	[131:0]	DFFDenominator;
	reg	[191:0]	DFFNumerator;
	wire	[191:0]	wire_DFFQuotient_d;
	reg	[191:0]	DFFQuotient;
	reg	[137:0]	DFFStage;
	wire	[1:0]	wire_add_sub_0_result_int;
	wire	wire_add_sub_0_cout;
	wire	[0:0]	wire_add_sub_0_dataa;
	wire	[0:0]	wire_add_sub_0_datab;
	wire	[0:0]	wire_add_sub_0_result;
	wire	[2:0]	wire_add_sub_1_result_int;
	wire	wire_add_sub_1_cout;
	wire	[1:0]	wire_add_sub_1_dataa;
	wire	[1:0]	wire_add_sub_1_datab;
	wire	[1:0]	wire_add_sub_1_result;
	wire	[11:0]	wire_add_sub_10_result_int;
	wire	wire_add_sub_10_cout;
	wire	[10:0]	wire_add_sub_10_dataa;
	wire	[10:0]	wire_add_sub_10_datab;
	wire	[10:0]	wire_add_sub_10_result;
	wire	[12:0]	wire_add_sub_11_result_int;
	wire	wire_add_sub_11_cout;
	wire	[11:0]	wire_add_sub_11_dataa;
	wire	[11:0]	wire_add_sub_11_datab;
	wire	[11:0]	wire_add_sub_11_result;
	wire	[13:0]	wire_add_sub_12_result_int;
	wire	wire_add_sub_12_cout;
	wire	[12:0]	wire_add_sub_12_dataa;
	wire	[12:0]	wire_add_sub_12_datab;
	wire	[12:0]	wire_add_sub_12_result;
	wire	[14:0]	wire_add_sub_13_result_int;
	wire	wire_add_sub_13_cout;
	wire	[13:0]	wire_add_sub_13_dataa;
	wire	[13:0]	wire_add_sub_13_datab;
	wire	[13:0]	wire_add_sub_13_result;
	wire	[15:0]	wire_add_sub_14_result_int;
	wire	wire_add_sub_14_cout;
	wire	[14:0]	wire_add_sub_14_dataa;
	wire	[14:0]	wire_add_sub_14_datab;
	wire	[14:0]	wire_add_sub_14_result;
	wire	[16:0]	wire_add_sub_15_result_int;
	wire	wire_add_sub_15_cout;
	wire	[15:0]	wire_add_sub_15_dataa;
	wire	[15:0]	wire_add_sub_15_datab;
	wire	[15:0]	wire_add_sub_15_result;
	wire	[17:0]	wire_add_sub_16_result_int;
	wire	wire_add_sub_16_cout;
	wire	[16:0]	wire_add_sub_16_dataa;
	wire	[16:0]	wire_add_sub_16_datab;
	wire	[16:0]	wire_add_sub_16_result;
	wire	[18:0]	wire_add_sub_17_result_int;
	wire	wire_add_sub_17_cout;
	wire	[17:0]	wire_add_sub_17_dataa;
	wire	[17:0]	wire_add_sub_17_datab;
	wire	[17:0]	wire_add_sub_17_result;
	wire	[19:0]	wire_add_sub_18_result_int;
	wire	wire_add_sub_18_cout;
	wire	[18:0]	wire_add_sub_18_dataa;
	wire	[18:0]	wire_add_sub_18_datab;
	wire	[18:0]	wire_add_sub_18_result;
	wire	[20:0]	wire_add_sub_19_result_int;
	wire	wire_add_sub_19_cout;
	wire	[19:0]	wire_add_sub_19_dataa;
	wire	[19:0]	wire_add_sub_19_datab;
	wire	[19:0]	wire_add_sub_19_result;
	wire	[3:0]	wire_add_sub_2_result_int;
	wire	wire_add_sub_2_cout;
	wire	[2:0]	wire_add_sub_2_dataa;
	wire	[2:0]	wire_add_sub_2_datab;
	wire	[2:0]	wire_add_sub_2_result;
	wire	[21:0]	wire_add_sub_20_result_int;
	wire	wire_add_sub_20_cout;
	wire	[20:0]	wire_add_sub_20_dataa;
	wire	[20:0]	wire_add_sub_20_datab;
	wire	[20:0]	wire_add_sub_20_result;
	wire	[22:0]	wire_add_sub_21_result_int;
	wire	wire_add_sub_21_cout;
	wire	[21:0]	wire_add_sub_21_dataa;
	wire	[21:0]	wire_add_sub_21_datab;
	wire	[21:0]	wire_add_sub_21_result;
	wire	[23:0]	wire_add_sub_22_result_int;
	wire	wire_add_sub_22_cout;
	wire	[22:0]	wire_add_sub_22_dataa;
	wire	[22:0]	wire_add_sub_22_datab;
	wire	[22:0]	wire_add_sub_22_result;
	wire	[23:0]	wire_add_sub_23_result_int;
	wire	wire_add_sub_23_cout;
	wire	[22:0]	wire_add_sub_23_dataa;
	wire	[22:0]	wire_add_sub_23_datab;
	wire	[22:0]	wire_add_sub_23_result;
	wire	[23:0]	wire_add_sub_24_result_int;
	wire	wire_add_sub_24_cout;
	wire	[22:0]	wire_add_sub_24_dataa;
	wire	[22:0]	wire_add_sub_24_datab;
	wire	[22:0]	wire_add_sub_24_result;
	wire	[23:0]	wire_add_sub_25_result_int;
	wire	wire_add_sub_25_cout;
	wire	[22:0]	wire_add_sub_25_dataa;
	wire	[22:0]	wire_add_sub_25_datab;
	wire	[22:0]	wire_add_sub_25_result;
	wire	[23:0]	wire_add_sub_26_result_int;
	wire	wire_add_sub_26_cout;
	wire	[22:0]	wire_add_sub_26_dataa;
	wire	[22:0]	wire_add_sub_26_datab;
	wire	[22:0]	wire_add_sub_26_result;
	wire	[23:0]	wire_add_sub_27_result_int;
	wire	wire_add_sub_27_cout;
	wire	[22:0]	wire_add_sub_27_dataa;
	wire	[22:0]	wire_add_sub_27_datab;
	wire	[22:0]	wire_add_sub_27_result;
	wire	[23:0]	wire_add_sub_28_result_int;
	wire	wire_add_sub_28_cout;
	wire	[22:0]	wire_add_sub_28_dataa;
	wire	[22:0]	wire_add_sub_28_datab;
	wire	[22:0]	wire_add_sub_28_result;
	wire	[23:0]	wire_add_sub_29_result_int;
	wire	wire_add_sub_29_cout;
	wire	[22:0]	wire_add_sub_29_dataa;
	wire	[22:0]	wire_add_sub_29_datab;
	wire	[22:0]	wire_add_sub_29_result;
	wire	[4:0]	wire_add_sub_3_result_int;
	wire	wire_add_sub_3_cout;
	wire	[3:0]	wire_add_sub_3_dataa;
	wire	[3:0]	wire_add_sub_3_datab;
	wire	[3:0]	wire_add_sub_3_result;
	wire	[23:0]	wire_add_sub_30_result_int;
	wire	wire_add_sub_30_cout;
	wire	[22:0]	wire_add_sub_30_dataa;
	wire	[22:0]	wire_add_sub_30_datab;
	wire	[22:0]	wire_add_sub_30_result;
	wire	[23:0]	wire_add_sub_31_result_int;
	wire	wire_add_sub_31_cout;
	wire	[22:0]	wire_add_sub_31_dataa;
	wire	[22:0]	wire_add_sub_31_datab;
	wire	[22:0]	wire_add_sub_31_result;
	wire	[5:0]	wire_add_sub_4_result_int;
	wire	wire_add_sub_4_cout;
	wire	[4:0]	wire_add_sub_4_dataa;
	wire	[4:0]	wire_add_sub_4_datab;
	wire	[4:0]	wire_add_sub_4_result;
	wire	[6:0]	wire_add_sub_5_result_int;
	wire	wire_add_sub_5_cout;
	wire	[5:0]	wire_add_sub_5_dataa;
	wire	[5:0]	wire_add_sub_5_datab;
	wire	[5:0]	wire_add_sub_5_result;
	wire	[7:0]	wire_add_sub_6_result_int;
	wire	wire_add_sub_6_cout;
	wire	[6:0]	wire_add_sub_6_dataa;
	wire	[6:0]	wire_add_sub_6_datab;
	wire	[6:0]	wire_add_sub_6_result;
	wire	[8:0]	wire_add_sub_7_result_int;
	wire	wire_add_sub_7_cout;
	wire	[7:0]	wire_add_sub_7_dataa;
	wire	[7:0]	wire_add_sub_7_datab;
	wire	[7:0]	wire_add_sub_7_result;
	wire	[9:0]	wire_add_sub_8_result_int;
	wire	wire_add_sub_8_cout;
	wire	[8:0]	wire_add_sub_8_dataa;
	wire	[8:0]	wire_add_sub_8_datab;
	wire	[8:0]	wire_add_sub_8_result;
	wire	[10:0]	wire_add_sub_9_result_int;
	wire	wire_add_sub_9_cout;
	wire	[9:0]	wire_add_sub_9_dataa;
	wire	[9:0]	wire_add_sub_9_datab;
	wire	[9:0]	wire_add_sub_9_result;
	wire aclr;
	wire clk_en;
	/* verilator lint_off UNOPT */
	wire  [758:0]  DenominatorIn;
	/* verilator lint_on UNOPT */
	wire  [758:0]  DenominatorIn_tmp;
	wire  gnd_wire;
	wire  [1055:0]  nose;
	/* verilator lint_off UNOPT */
	wire  [1055:0]  NumeratorIn;
	/* verilator lint_on UNOPT */
	wire  [1055:0]  NumeratorIn_tmp;
	wire  [735:0]  prestg;
	wire  [31:0]  quotient_tmp;
	/* verilator lint_off UNOPT */
	wire  [725:0]  sel;
	/* verilator lint_on UNOPT */
	wire  [1055:0]  selnose;
	wire  [758:0]  StageIn;
	wire  [758:0]  StageIn_tmp;
	/* verilator lint_off UNOPT */
	wire  [735:0]  StageOut;
	/* verilator lint_on UNOPT */
	wire  vcc_wire;

	// synopsys translate_off
	initial
		DFFDenominator[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[0:0] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator[0:0] <= wire_DFFDenominator_d[0:0];
	// synopsys translate_off
	initial
		DFFDenominator[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[1:1] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[1:1] <= wire_DFFDenominator_d[1:1];
	// synopsys translate_off
	initial
		DFFDenominator[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[2:2] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[2:2] <= wire_DFFDenominator_d[2:2];
	// synopsys translate_off
	initial
		DFFDenominator[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[3:3] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[3:3] <= wire_DFFDenominator_d[3:3];
	// synopsys translate_off
	initial
		DFFDenominator[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[4:4] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[4:4] <= wire_DFFDenominator_d[4:4];
	// synopsys translate_off
	initial
		DFFDenominator[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[5:5] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[5:5] <= wire_DFFDenominator_d[5:5];
	// synopsys translate_off
	initial
		DFFDenominator[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[6:6] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[6:6] <= wire_DFFDenominator_d[6:6];
	// synopsys translate_off
	initial
		DFFDenominator[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[7:7] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[7:7] <= wire_DFFDenominator_d[7:7];
	// synopsys translate_off
	initial
		DFFDenominator[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[8:8] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[8:8] <= wire_DFFDenominator_d[8:8];
	// synopsys translate_off
	initial
		DFFDenominator[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[9:9] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[9:9] <= wire_DFFDenominator_d[9:9];
	// synopsys translate_off
	initial
		DFFDenominator[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[10:10] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[10:10] <= wire_DFFDenominator_d[10:10];
	// synopsys translate_off
	initial
		DFFDenominator[11:11] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[11:11] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[11:11] <= wire_DFFDenominator_d[11:11];
	// synopsys translate_off
	initial
		DFFDenominator[12:12] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[12:12] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[12:12] <= wire_DFFDenominator_d[12:12];
	// synopsys translate_off
	initial
		DFFDenominator[13:13] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[13:13] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[13:13] <= wire_DFFDenominator_d[13:13];
	// synopsys translate_off
	initial
		DFFDenominator[14:14] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[14:14] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[14:14] <= wire_DFFDenominator_d[14:14];
	// synopsys translate_off
	initial
		DFFDenominator[15:15] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[15:15] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[15:15] <= wire_DFFDenominator_d[15:15];
	// synopsys translate_off
	initial
		DFFDenominator[16:16] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[16:16] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[16:16] <= wire_DFFDenominator_d[16:16];
	// synopsys translate_off
	initial
		DFFDenominator[17:17] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[17:17] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[17:17] <= wire_DFFDenominator_d[17:17];
	// synopsys translate_off
	initial
		DFFDenominator[18:18] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[18:18] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[18:18] <= wire_DFFDenominator_d[18:18];
	// synopsys translate_off
	initial
		DFFDenominator[19:19] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[19:19] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[19:19] <= wire_DFFDenominator_d[19:19];
	// synopsys translate_off
	initial
		DFFDenominator[20:20] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[20:20] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[20:20] <= wire_DFFDenominator_d[20:20];
	// synopsys translate_off
	initial
		DFFDenominator[21:21] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[21:21] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[21:21] <= wire_DFFDenominator_d[21:21];
	// synopsys translate_off
	initial
		DFFDenominator[22:22] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[22:22] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator[22:22] <= wire_DFFDenominator_d[22:22];
	// synopsys translate_off
	initial
		DFFDenominator[23:23] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[23:23] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[23:23] <= wire_DFFDenominator_d[23:23];
	// synopsys translate_off
	initial
		DFFDenominator[24:24] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[24:24] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[24:24] <= wire_DFFDenominator_d[24:24];
	// synopsys translate_off
	initial
		DFFDenominator[25:25] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[25:25] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[25:25] <= wire_DFFDenominator_d[25:25];
	// synopsys translate_off
	initial
		DFFDenominator[26:26] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[26:26] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[26:26] <= wire_DFFDenominator_d[26:26];
	// synopsys translate_off
	initial
		DFFDenominator[27:27] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[27:27] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[27:27] <= wire_DFFDenominator_d[27:27];
	// synopsys translate_off
	initial
		DFFDenominator[28:28] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[28:28] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[28:28] <= wire_DFFDenominator_d[28:28];
	// synopsys translate_off
	initial
		DFFDenominator[29:29] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[29:29] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[29:29] <= wire_DFFDenominator_d[29:29];
	// synopsys translate_off
	initial
		DFFDenominator[30:30] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[30:30] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[30:30] <= wire_DFFDenominator_d[30:30];
	// synopsys translate_off
	initial
		DFFDenominator[31:31] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[31:31] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[31:31] <= wire_DFFDenominator_d[31:31];
	// synopsys translate_off
	initial
		DFFDenominator[32:32] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[32:32] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[32:32] <= wire_DFFDenominator_d[32:32];
	// synopsys translate_off
	initial
		DFFDenominator[33:33] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[33:33] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[33:33] <= wire_DFFDenominator_d[33:33];
	// synopsys translate_off
	initial
		DFFDenominator[34:34] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[34:34] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[34:34] <= wire_DFFDenominator_d[34:34];
	// synopsys translate_off
	initial
		DFFDenominator[35:35] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[35:35] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[35:35] <= wire_DFFDenominator_d[35:35];
	// synopsys translate_off
	initial
		DFFDenominator[36:36] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[36:36] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[36:36] <= wire_DFFDenominator_d[36:36];
	// synopsys translate_off
	initial
		DFFDenominator[37:37] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[37:37] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[37:37] <= wire_DFFDenominator_d[37:37];
	// synopsys translate_off
	initial
		DFFDenominator[38:38] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[38:38] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[38:38] <= wire_DFFDenominator_d[38:38];
	// synopsys translate_off
	initial
		DFFDenominator[39:39] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[39:39] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[39:39] <= wire_DFFDenominator_d[39:39];
	// synopsys translate_off
	initial
		DFFDenominator[40:40] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[40:40] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[40:40] <= wire_DFFDenominator_d[40:40];
	// synopsys translate_off
	initial
		DFFDenominator[41:41] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[41:41] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[41:41] <= wire_DFFDenominator_d[41:41];
	// synopsys translate_off
	initial
		DFFDenominator[42:42] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[42:42] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[42:42] <= wire_DFFDenominator_d[42:42];
	// synopsys translate_off
	initial
		DFFDenominator[43:43] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[43:43] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[43:43] <= wire_DFFDenominator_d[43:43];
	// synopsys translate_off
	initial
		DFFDenominator[44:44] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[44:44] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator[44:44] <= wire_DFFDenominator_d[44:44];
	// synopsys translate_off
	initial
		DFFDenominator[45:45] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[45:45] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[45:45] <= wire_DFFDenominator_d[45:45];
	// synopsys translate_off
	initial
		DFFDenominator[46:46] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[46:46] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[46:46] <= wire_DFFDenominator_d[46:46];
	// synopsys translate_off
	initial
		DFFDenominator[47:47] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[47:47] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[47:47] <= wire_DFFDenominator_d[47:47];
	// synopsys translate_off
	initial
		DFFDenominator[48:48] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[48:48] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[48:48] <= wire_DFFDenominator_d[48:48];
	// synopsys translate_off
	initial
		DFFDenominator[49:49] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[49:49] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[49:49] <= wire_DFFDenominator_d[49:49];
	// synopsys translate_off
	initial
		DFFDenominator[50:50] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[50:50] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[50:50] <= wire_DFFDenominator_d[50:50];
	// synopsys translate_off
	initial
		DFFDenominator[51:51] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[51:51] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[51:51] <= wire_DFFDenominator_d[51:51];
	// synopsys translate_off
	initial
		DFFDenominator[52:52] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[52:52] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[52:52] <= wire_DFFDenominator_d[52:52];
	// synopsys translate_off
	initial
		DFFDenominator[53:53] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[53:53] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[53:53] <= wire_DFFDenominator_d[53:53];
	// synopsys translate_off
	initial
		DFFDenominator[54:54] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[54:54] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[54:54] <= wire_DFFDenominator_d[54:54];
	// synopsys translate_off
	initial
		DFFDenominator[55:55] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[55:55] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[55:55] <= wire_DFFDenominator_d[55:55];
	// synopsys translate_off
	initial
		DFFDenominator[56:56] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[56:56] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[56:56] <= wire_DFFDenominator_d[56:56];
	// synopsys translate_off
	initial
		DFFDenominator[57:57] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[57:57] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[57:57] <= wire_DFFDenominator_d[57:57];
	// synopsys translate_off
	initial
		DFFDenominator[58:58] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[58:58] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[58:58] <= wire_DFFDenominator_d[58:58];
	// synopsys translate_off
	initial
		DFFDenominator[59:59] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[59:59] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[59:59] <= wire_DFFDenominator_d[59:59];
	// synopsys translate_off
	initial
		DFFDenominator[60:60] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[60:60] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[60:60] <= wire_DFFDenominator_d[60:60];
	// synopsys translate_off
	initial
		DFFDenominator[61:61] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[61:61] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[61:61] <= wire_DFFDenominator_d[61:61];
	// synopsys translate_off
	initial
		DFFDenominator[62:62] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[62:62] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[62:62] <= wire_DFFDenominator_d[62:62];
	// synopsys translate_off
	initial
		DFFDenominator[63:63] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[63:63] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[63:63] <= wire_DFFDenominator_d[63:63];
	// synopsys translate_off
	initial
		DFFDenominator[64:64] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[64:64] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[64:64] <= wire_DFFDenominator_d[64:64];
	// synopsys translate_off
	initial
		DFFDenominator[65:65] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[65:65] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[65:65] <= wire_DFFDenominator_d[65:65];
	// synopsys translate_off
	initial
		DFFDenominator[66:66] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[66:66] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator[66:66] <= wire_DFFDenominator_d[66:66];
	// synopsys translate_off
	initial
		DFFDenominator[67:67] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[67:67] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[67:67] <= wire_DFFDenominator_d[67:67];
	// synopsys translate_off
	initial
		DFFDenominator[68:68] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[68:68] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[68:68] <= wire_DFFDenominator_d[68:68];
	// synopsys translate_off
	initial
		DFFDenominator[69:69] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[69:69] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[69:69] <= wire_DFFDenominator_d[69:69];
	// synopsys translate_off
	initial
		DFFDenominator[70:70] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[70:70] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[70:70] <= wire_DFFDenominator_d[70:70];
	// synopsys translate_off
	initial
		DFFDenominator[71:71] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[71:71] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[71:71] <= wire_DFFDenominator_d[71:71];
	// synopsys translate_off
	initial
		DFFDenominator[72:72] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[72:72] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[72:72] <= wire_DFFDenominator_d[72:72];
	// synopsys translate_off
	initial
		DFFDenominator[73:73] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[73:73] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[73:73] <= wire_DFFDenominator_d[73:73];
	// synopsys translate_off
	initial
		DFFDenominator[74:74] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[74:74] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[74:74] <= wire_DFFDenominator_d[74:74];
	// synopsys translate_off
	initial
		DFFDenominator[75:75] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[75:75] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[75:75] <= wire_DFFDenominator_d[75:75];
	// synopsys translate_off
	initial
		DFFDenominator[76:76] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[76:76] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[76:76] <= wire_DFFDenominator_d[76:76];
	// synopsys translate_off
	initial
		DFFDenominator[77:77] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[77:77] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[77:77] <= wire_DFFDenominator_d[77:77];
	// synopsys translate_off
	initial
		DFFDenominator[78:78] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[78:78] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[78:78] <= wire_DFFDenominator_d[78:78];
	// synopsys translate_off
	initial
		DFFDenominator[79:79] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[79:79] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[79:79] <= wire_DFFDenominator_d[79:79];
	// synopsys translate_off
	initial
		DFFDenominator[80:80] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[80:80] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[80:80] <= wire_DFFDenominator_d[80:80];
	// synopsys translate_off
	initial
		DFFDenominator[81:81] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[81:81] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[81:81] <= wire_DFFDenominator_d[81:81];
	// synopsys translate_off
	initial
		DFFDenominator[82:82] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[82:82] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[82:82] <= wire_DFFDenominator_d[82:82];
	// synopsys translate_off
	initial
		DFFDenominator[83:83] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[83:83] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[83:83] <= wire_DFFDenominator_d[83:83];
	// synopsys translate_off
	initial
		DFFDenominator[84:84] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[84:84] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[84:84] <= wire_DFFDenominator_d[84:84];
	// synopsys translate_off
	initial
		DFFDenominator[85:85] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[85:85] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[85:85] <= wire_DFFDenominator_d[85:85];
	// synopsys translate_off
	initial
		DFFDenominator[86:86] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[86:86] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[86:86] <= wire_DFFDenominator_d[86:86];
	// synopsys translate_off
	initial
		DFFDenominator[87:87] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[87:87] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[87:87] <= wire_DFFDenominator_d[87:87];
	// synopsys translate_off
	initial
		DFFDenominator[88:88] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[88:88] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator[88:88] <= wire_DFFDenominator_d[88:88];
	// synopsys translate_off
	initial
		DFFDenominator[89:89] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[89:89] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[89:89] <= wire_DFFDenominator_d[89:89];
	// synopsys translate_off
	initial
		DFFDenominator[90:90] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[90:90] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[90:90] <= wire_DFFDenominator_d[90:90];
	// synopsys translate_off
	initial
		DFFDenominator[91:91] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[91:91] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[91:91] <= wire_DFFDenominator_d[91:91];
	// synopsys translate_off
	initial
		DFFDenominator[92:92] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[92:92] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[92:92] <= wire_DFFDenominator_d[92:92];
	// synopsys translate_off
	initial
		DFFDenominator[93:93] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[93:93] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[93:93] <= wire_DFFDenominator_d[93:93];
	// synopsys translate_off
	initial
		DFFDenominator[94:94] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[94:94] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[94:94] <= wire_DFFDenominator_d[94:94];
	// synopsys translate_off
	initial
		DFFDenominator[95:95] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[95:95] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[95:95] <= wire_DFFDenominator_d[95:95];
	// synopsys translate_off
	initial
		DFFDenominator[96:96] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[96:96] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[96:96] <= wire_DFFDenominator_d[96:96];
	// synopsys translate_off
	initial
		DFFDenominator[97:97] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[97:97] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[97:97] <= wire_DFFDenominator_d[97:97];
	// synopsys translate_off
	initial
		DFFDenominator[98:98] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[98:98] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[98:98] <= wire_DFFDenominator_d[98:98];
	// synopsys translate_off
	initial
		DFFDenominator[99:99] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[99:99] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[99:99] <= wire_DFFDenominator_d[99:99];
	// synopsys translate_off
	initial
		DFFDenominator[100:100] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[100:100] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[100:100] <= wire_DFFDenominator_d[100:100];
	// synopsys translate_off
	initial
		DFFDenominator[101:101] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[101:101] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[101:101] <= wire_DFFDenominator_d[101:101];
	// synopsys translate_off
	initial
		DFFDenominator[102:102] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[102:102] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[102:102] <= wire_DFFDenominator_d[102:102];
	// synopsys translate_off
	initial
		DFFDenominator[103:103] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[103:103] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[103:103] <= wire_DFFDenominator_d[103:103];
	// synopsys translate_off
	initial
		DFFDenominator[104:104] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[104:104] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[104:104] <= wire_DFFDenominator_d[104:104];
	// synopsys translate_off
	initial
		DFFDenominator[105:105] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[105:105] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[105:105] <= wire_DFFDenominator_d[105:105];
	// synopsys translate_off
	initial
		DFFDenominator[106:106] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[106:106] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[106:106] <= wire_DFFDenominator_d[106:106];
	// synopsys translate_off
	initial
		DFFDenominator[107:107] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[107:107] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[107:107] <= wire_DFFDenominator_d[107:107];
	// synopsys translate_off
	initial
		DFFDenominator[108:108] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[108:108] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[108:108] <= wire_DFFDenominator_d[108:108];
	// synopsys translate_off
	initial
		DFFDenominator[109:109] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[109:109] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[109:109] <= wire_DFFDenominator_d[109:109];
	// synopsys translate_off
	initial
		DFFDenominator[110:110] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[110:110] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator[110:110] <= wire_DFFDenominator_d[110:110];
	// synopsys translate_off
	initial
		DFFDenominator[111:111] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[111:111] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[111:111] <= wire_DFFDenominator_d[111:111];
	// synopsys translate_off
	initial
		DFFDenominator[112:112] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[112:112] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[112:112] <= wire_DFFDenominator_d[112:112];
	// synopsys translate_off
	initial
		DFFDenominator[113:113] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[113:113] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[113:113] <= wire_DFFDenominator_d[113:113];
	// synopsys translate_off
	initial
		DFFDenominator[114:114] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[114:114] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[114:114] <= wire_DFFDenominator_d[114:114];
	// synopsys translate_off
	initial
		DFFDenominator[115:115] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[115:115] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[115:115] <= wire_DFFDenominator_d[115:115];
	// synopsys translate_off
	initial
		DFFDenominator[116:116] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[116:116] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[116:116] <= wire_DFFDenominator_d[116:116];
	// synopsys translate_off
	initial
		DFFDenominator[117:117] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[117:117] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[117:117] <= wire_DFFDenominator_d[117:117];
	// synopsys translate_off
	initial
		DFFDenominator[118:118] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[118:118] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[118:118] <= wire_DFFDenominator_d[118:118];
	// synopsys translate_off
	initial
		DFFDenominator[119:119] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[119:119] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[119:119] <= wire_DFFDenominator_d[119:119];
	// synopsys translate_off
	initial
		DFFDenominator[120:120] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[120:120] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[120:120] <= wire_DFFDenominator_d[120:120];
	// synopsys translate_off
	initial
		DFFDenominator[121:121] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[121:121] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[121:121] <= wire_DFFDenominator_d[121:121];
	// synopsys translate_off
	initial
		DFFDenominator[122:122] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[122:122] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[122:122] <= wire_DFFDenominator_d[122:122];
	// synopsys translate_off
	initial
		DFFDenominator[123:123] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[123:123] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[123:123] <= wire_DFFDenominator_d[123:123];
	// synopsys translate_off
	initial
		DFFDenominator[124:124] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[124:124] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[124:124] <= wire_DFFDenominator_d[124:124];
	// synopsys translate_off
	initial
		DFFDenominator[125:125] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[125:125] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[125:125] <= wire_DFFDenominator_d[125:125];
	// synopsys translate_off
	initial
		DFFDenominator[126:126] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[126:126] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[126:126] <= wire_DFFDenominator_d[126:126];
	// synopsys translate_off
	initial
		DFFDenominator[127:127] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[127:127] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[127:127] <= wire_DFFDenominator_d[127:127];
	// synopsys translate_off
	initial
		DFFDenominator[128:128] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[128:128] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[128:128] <= wire_DFFDenominator_d[128:128];
	// synopsys translate_off
	initial
		DFFDenominator[129:129] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[129:129] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[129:129] <= wire_DFFDenominator_d[129:129];
	// synopsys translate_off
	initial
		DFFDenominator[130:130] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[130:130] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[130:130] <= wire_DFFDenominator_d[130:130];
	// synopsys translate_off
	initial
		DFFDenominator[131:131] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator[131:131] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFDenominator[131:131] <= wire_DFFDenominator_d[131:131];
	assign
		wire_DFFDenominator_d = {DFFDenominator[109:0], denominator};
	// synopsys translate_off
	initial
		DFFNumerator = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFNumerator <= 192'b0;
		else if  (clk_en == 1'b1)   DFFNumerator <= {DFFNumerator[159:0], numerator};
	// synopsys translate_off
	initial
		DFFQuotient[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[0:0] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[0:0] <= wire_DFFQuotient_d[0:0];
	// synopsys translate_off
	initial
		DFFQuotient[1:1] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[1:1] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[1:1] <= wire_DFFQuotient_d[1:1];
	// synopsys translate_off
	initial
		DFFQuotient[2:2] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[2:2] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[2:2] <= wire_DFFQuotient_d[2:2];
	// synopsys translate_off
	initial
		DFFQuotient[3:3] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[3:3] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[3:3] <= wire_DFFQuotient_d[3:3];
	// synopsys translate_off
	initial
		DFFQuotient[4:4] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[4:4] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[4:4] <= wire_DFFQuotient_d[4:4];
	// synopsys translate_off
	initial
		DFFQuotient[5:5] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[5:5] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[5:5] <= wire_DFFQuotient_d[5:5];
	// synopsys translate_off
	initial
		DFFQuotient[6:6] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[6:6] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[6:6] <= wire_DFFQuotient_d[6:6];
	// synopsys translate_off
	initial
		DFFQuotient[7:7] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[7:7] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[7:7] <= wire_DFFQuotient_d[7:7];
	// synopsys translate_off
	initial
		DFFQuotient[8:8] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[8:8] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[8:8] <= wire_DFFQuotient_d[8:8];
	// synopsys translate_off
	initial
		DFFQuotient[9:9] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[9:9] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[9:9] <= wire_DFFQuotient_d[9:9];
	// synopsys translate_off
	initial
		DFFQuotient[10:10] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[10:10] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[10:10] <= wire_DFFQuotient_d[10:10];
	// synopsys translate_off
	initial
		DFFQuotient[11:11] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[11:11] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[11:11] <= wire_DFFQuotient_d[11:11];
	// synopsys translate_off
	initial
		DFFQuotient[12:12] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[12:12] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[12:12] <= wire_DFFQuotient_d[12:12];
	// synopsys translate_off
	initial
		DFFQuotient[13:13] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[13:13] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[13:13] <= wire_DFFQuotient_d[13:13];
	// synopsys translate_off
	initial
		DFFQuotient[14:14] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[14:14] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[14:14] <= wire_DFFQuotient_d[14:14];
	// synopsys translate_off
	initial
		DFFQuotient[15:15] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[15:15] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[15:15] <= wire_DFFQuotient_d[15:15];
	// synopsys translate_off
	initial
		DFFQuotient[16:16] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[16:16] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[16:16] <= wire_DFFQuotient_d[16:16];
	// synopsys translate_off
	initial
		DFFQuotient[17:17] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[17:17] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[17:17] <= wire_DFFQuotient_d[17:17];
	// synopsys translate_off
	initial
		DFFQuotient[18:18] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[18:18] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[18:18] <= wire_DFFQuotient_d[18:18];
	// synopsys translate_off
	initial
		DFFQuotient[19:19] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[19:19] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[19:19] <= wire_DFFQuotient_d[19:19];
	// synopsys translate_off
	initial
		DFFQuotient[20:20] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[20:20] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[20:20] <= wire_DFFQuotient_d[20:20];
	// synopsys translate_off
	initial
		DFFQuotient[21:21] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[21:21] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[21:21] <= wire_DFFQuotient_d[21:21];
	// synopsys translate_off
	initial
		DFFQuotient[22:22] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[22:22] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[22:22] <= wire_DFFQuotient_d[22:22];
	// synopsys translate_off
	initial
		DFFQuotient[23:23] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[23:23] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[23:23] <= wire_DFFQuotient_d[23:23];
	// synopsys translate_off
	initial
		DFFQuotient[24:24] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[24:24] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[24:24] <= wire_DFFQuotient_d[24:24];
	// synopsys translate_off
	initial
		DFFQuotient[25:25] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[25:25] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[25:25] <= wire_DFFQuotient_d[25:25];
	// synopsys translate_off
	initial
		DFFQuotient[26:26] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[26:26] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[26:26] <= wire_DFFQuotient_d[26:26];
	// synopsys translate_off
	initial
		DFFQuotient[27:27] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[27:27] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[27:27] <= wire_DFFQuotient_d[27:27];
	// synopsys translate_off
	initial
		DFFQuotient[28:28] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[28:28] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[28:28] <= wire_DFFQuotient_d[28:28];
	// synopsys translate_off
	initial
		DFFQuotient[29:29] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[29:29] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[29:29] <= wire_DFFQuotient_d[29:29];
	// synopsys translate_off
	initial
		DFFQuotient[30:30] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[30:30] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[30:30] <= wire_DFFQuotient_d[30:30];
	// synopsys translate_off
	initial
		DFFQuotient[31:31] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[31:31] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[31:31] <= wire_DFFQuotient_d[31:31];
	// synopsys translate_off
	initial
		DFFQuotient[32:32] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[32:32] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[32:32] <= wire_DFFQuotient_d[32:32];
	// synopsys translate_off
	initial
		DFFQuotient[33:33] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[33:33] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[33:33] <= wire_DFFQuotient_d[33:33];
	// synopsys translate_off
	initial
		DFFQuotient[34:34] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[34:34] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[34:34] <= wire_DFFQuotient_d[34:34];
	// synopsys translate_off
	initial
		DFFQuotient[35:35] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[35:35] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[35:35] <= wire_DFFQuotient_d[35:35];
	// synopsys translate_off
	initial
		DFFQuotient[36:36] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[36:36] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[36:36] <= wire_DFFQuotient_d[36:36];
	// synopsys translate_off
	initial
		DFFQuotient[37:37] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[37:37] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[37:37] <= wire_DFFQuotient_d[37:37];
	// synopsys translate_off
	initial
		DFFQuotient[38:38] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[38:38] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[38:38] <= wire_DFFQuotient_d[38:38];
	// synopsys translate_off
	initial
		DFFQuotient[39:39] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[39:39] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[39:39] <= wire_DFFQuotient_d[39:39];
	// synopsys translate_off
	initial
		DFFQuotient[40:40] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[40:40] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[40:40] <= wire_DFFQuotient_d[40:40];
	// synopsys translate_off
	initial
		DFFQuotient[41:41] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[41:41] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[41:41] <= wire_DFFQuotient_d[41:41];
	// synopsys translate_off
	initial
		DFFQuotient[42:42] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[42:42] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[42:42] <= wire_DFFQuotient_d[42:42];
	// synopsys translate_off
	initial
		DFFQuotient[43:43] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[43:43] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[43:43] <= wire_DFFQuotient_d[43:43];
	// synopsys translate_off
	initial
		DFFQuotient[44:44] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[44:44] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[44:44] <= wire_DFFQuotient_d[44:44];
	// synopsys translate_off
	initial
		DFFQuotient[45:45] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[45:45] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[45:45] <= wire_DFFQuotient_d[45:45];
	// synopsys translate_off
	initial
		DFFQuotient[46:46] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[46:46] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[46:46] <= wire_DFFQuotient_d[46:46];
	// synopsys translate_off
	initial
		DFFQuotient[47:47] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[47:47] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[47:47] <= wire_DFFQuotient_d[47:47];
	// synopsys translate_off
	initial
		DFFQuotient[48:48] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[48:48] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[48:48] <= wire_DFFQuotient_d[48:48];
	// synopsys translate_off
	initial
		DFFQuotient[49:49] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[49:49] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[49:49] <= wire_DFFQuotient_d[49:49];
	// synopsys translate_off
	initial
		DFFQuotient[50:50] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[50:50] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[50:50] <= wire_DFFQuotient_d[50:50];
	// synopsys translate_off
	initial
		DFFQuotient[51:51] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[51:51] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[51:51] <= wire_DFFQuotient_d[51:51];
	// synopsys translate_off
	initial
		DFFQuotient[52:52] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[52:52] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[52:52] <= wire_DFFQuotient_d[52:52];
	// synopsys translate_off
	initial
		DFFQuotient[53:53] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[53:53] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[53:53] <= wire_DFFQuotient_d[53:53];
	// synopsys translate_off
	initial
		DFFQuotient[54:54] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[54:54] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[54:54] <= wire_DFFQuotient_d[54:54];
	// synopsys translate_off
	initial
		DFFQuotient[55:55] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[55:55] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[55:55] <= wire_DFFQuotient_d[55:55];
	// synopsys translate_off
	initial
		DFFQuotient[56:56] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[56:56] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[56:56] <= wire_DFFQuotient_d[56:56];
	// synopsys translate_off
	initial
		DFFQuotient[57:57] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[57:57] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[57:57] <= wire_DFFQuotient_d[57:57];
	// synopsys translate_off
	initial
		DFFQuotient[58:58] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[58:58] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[58:58] <= wire_DFFQuotient_d[58:58];
	// synopsys translate_off
	initial
		DFFQuotient[59:59] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[59:59] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[59:59] <= wire_DFFQuotient_d[59:59];
	// synopsys translate_off
	initial
		DFFQuotient[60:60] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[60:60] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[60:60] <= wire_DFFQuotient_d[60:60];
	// synopsys translate_off
	initial
		DFFQuotient[61:61] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[61:61] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[61:61] <= wire_DFFQuotient_d[61:61];
	// synopsys translate_off
	initial
		DFFQuotient[62:62] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[62:62] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[62:62] <= wire_DFFQuotient_d[62:62];
	// synopsys translate_off
	initial
		DFFQuotient[63:63] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[63:63] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[63:63] <= wire_DFFQuotient_d[63:63];
	// synopsys translate_off
	initial
		DFFQuotient[64:64] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[64:64] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[64:64] <= wire_DFFQuotient_d[64:64];
	// synopsys translate_off
	initial
		DFFQuotient[65:65] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[65:65] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[65:65] <= wire_DFFQuotient_d[65:65];
	// synopsys translate_off
	initial
		DFFQuotient[66:66] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[66:66] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[66:66] <= wire_DFFQuotient_d[66:66];
	// synopsys translate_off
	initial
		DFFQuotient[67:67] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[67:67] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[67:67] <= wire_DFFQuotient_d[67:67];
	// synopsys translate_off
	initial
		DFFQuotient[68:68] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[68:68] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[68:68] <= wire_DFFQuotient_d[68:68];
	// synopsys translate_off
	initial
		DFFQuotient[69:69] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[69:69] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[69:69] <= wire_DFFQuotient_d[69:69];
	// synopsys translate_off
	initial
		DFFQuotient[70:70] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[70:70] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[70:70] <= wire_DFFQuotient_d[70:70];
	// synopsys translate_off
	initial
		DFFQuotient[71:71] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[71:71] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[71:71] <= wire_DFFQuotient_d[71:71];
	// synopsys translate_off
	initial
		DFFQuotient[72:72] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[72:72] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[72:72] <= wire_DFFQuotient_d[72:72];
	// synopsys translate_off
	initial
		DFFQuotient[73:73] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[73:73] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[73:73] <= wire_DFFQuotient_d[73:73];
	// synopsys translate_off
	initial
		DFFQuotient[74:74] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[74:74] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[74:74] <= wire_DFFQuotient_d[74:74];
	// synopsys translate_off
	initial
		DFFQuotient[75:75] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[75:75] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[75:75] <= wire_DFFQuotient_d[75:75];
	// synopsys translate_off
	initial
		DFFQuotient[76:76] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[76:76] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[76:76] <= wire_DFFQuotient_d[76:76];
	// synopsys translate_off
	initial
		DFFQuotient[77:77] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[77:77] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[77:77] <= wire_DFFQuotient_d[77:77];
	// synopsys translate_off
	initial
		DFFQuotient[78:78] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[78:78] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[78:78] <= wire_DFFQuotient_d[78:78];
	// synopsys translate_off
	initial
		DFFQuotient[79:79] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[79:79] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[79:79] <= wire_DFFQuotient_d[79:79];
	// synopsys translate_off
	initial
		DFFQuotient[80:80] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[80:80] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[80:80] <= wire_DFFQuotient_d[80:80];
	// synopsys translate_off
	initial
		DFFQuotient[81:81] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[81:81] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[81:81] <= wire_DFFQuotient_d[81:81];
	// synopsys translate_off
	initial
		DFFQuotient[82:82] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[82:82] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[82:82] <= wire_DFFQuotient_d[82:82];
	// synopsys translate_off
	initial
		DFFQuotient[83:83] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[83:83] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[83:83] <= wire_DFFQuotient_d[83:83];
	// synopsys translate_off
	initial
		DFFQuotient[84:84] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[84:84] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[84:84] <= wire_DFFQuotient_d[84:84];
	// synopsys translate_off
	initial
		DFFQuotient[85:85] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[85:85] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[85:85] <= wire_DFFQuotient_d[85:85];
	// synopsys translate_off
	initial
		DFFQuotient[86:86] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[86:86] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[86:86] <= wire_DFFQuotient_d[86:86];
	// synopsys translate_off
	initial
		DFFQuotient[87:87] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[87:87] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[87:87] <= wire_DFFQuotient_d[87:87];
	// synopsys translate_off
	initial
		DFFQuotient[88:88] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[88:88] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[88:88] <= wire_DFFQuotient_d[88:88];
	// synopsys translate_off
	initial
		DFFQuotient[89:89] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[89:89] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[89:89] <= wire_DFFQuotient_d[89:89];
	// synopsys translate_off
	initial
		DFFQuotient[90:90] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[90:90] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[90:90] <= wire_DFFQuotient_d[90:90];
	// synopsys translate_off
	initial
		DFFQuotient[91:91] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[91:91] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[91:91] <= wire_DFFQuotient_d[91:91];
	// synopsys translate_off
	initial
		DFFQuotient[92:92] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[92:92] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[92:92] <= wire_DFFQuotient_d[92:92];
	// synopsys translate_off
	initial
		DFFQuotient[93:93] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[93:93] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[93:93] <= wire_DFFQuotient_d[93:93];
	// synopsys translate_off
	initial
		DFFQuotient[94:94] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[94:94] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[94:94] <= wire_DFFQuotient_d[94:94];
	// synopsys translate_off
	initial
		DFFQuotient[95:95] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[95:95] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[95:95] <= wire_DFFQuotient_d[95:95];
	// synopsys translate_off
	initial
		DFFQuotient[96:96] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[96:96] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[96:96] <= wire_DFFQuotient_d[96:96];
	// synopsys translate_off
	initial
		DFFQuotient[97:97] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[97:97] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[97:97] <= wire_DFFQuotient_d[97:97];
	// synopsys translate_off
	initial
		DFFQuotient[98:98] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[98:98] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[98:98] <= wire_DFFQuotient_d[98:98];
	// synopsys translate_off
	initial
		DFFQuotient[99:99] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[99:99] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[99:99] <= wire_DFFQuotient_d[99:99];
	// synopsys translate_off
	initial
		DFFQuotient[100:100] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[100:100] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[100:100] <= wire_DFFQuotient_d[100:100];
	// synopsys translate_off
	initial
		DFFQuotient[101:101] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[101:101] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[101:101] <= wire_DFFQuotient_d[101:101];
	// synopsys translate_off
	initial
		DFFQuotient[102:102] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[102:102] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[102:102] <= wire_DFFQuotient_d[102:102];
	// synopsys translate_off
	initial
		DFFQuotient[103:103] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[103:103] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[103:103] <= wire_DFFQuotient_d[103:103];
	// synopsys translate_off
	initial
		DFFQuotient[104:104] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[104:104] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[104:104] <= wire_DFFQuotient_d[104:104];
	// synopsys translate_off
	initial
		DFFQuotient[105:105] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[105:105] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[105:105] <= wire_DFFQuotient_d[105:105];
	// synopsys translate_off
	initial
		DFFQuotient[106:106] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[106:106] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[106:106] <= wire_DFFQuotient_d[106:106];
	// synopsys translate_off
	initial
		DFFQuotient[107:107] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[107:107] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[107:107] <= wire_DFFQuotient_d[107:107];
	// synopsys translate_off
	initial
		DFFQuotient[108:108] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[108:108] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[108:108] <= wire_DFFQuotient_d[108:108];
	// synopsys translate_off
	initial
		DFFQuotient[109:109] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[109:109] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[109:109] <= wire_DFFQuotient_d[109:109];
	// synopsys translate_off
	initial
		DFFQuotient[110:110] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[110:110] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[110:110] <= wire_DFFQuotient_d[110:110];
	// synopsys translate_off
	initial
		DFFQuotient[111:111] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[111:111] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[111:111] <= wire_DFFQuotient_d[111:111];
	// synopsys translate_off
	initial
		DFFQuotient[112:112] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[112:112] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[112:112] <= wire_DFFQuotient_d[112:112];
	// synopsys translate_off
	initial
		DFFQuotient[113:113] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[113:113] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[113:113] <= wire_DFFQuotient_d[113:113];
	// synopsys translate_off
	initial
		DFFQuotient[114:114] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[114:114] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[114:114] <= wire_DFFQuotient_d[114:114];
	// synopsys translate_off
	initial
		DFFQuotient[115:115] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[115:115] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[115:115] <= wire_DFFQuotient_d[115:115];
	// synopsys translate_off
	initial
		DFFQuotient[116:116] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[116:116] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[116:116] <= wire_DFFQuotient_d[116:116];
	// synopsys translate_off
	initial
		DFFQuotient[117:117] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[117:117] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[117:117] <= wire_DFFQuotient_d[117:117];
	// synopsys translate_off
	initial
		DFFQuotient[118:118] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[118:118] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[118:118] <= wire_DFFQuotient_d[118:118];
	// synopsys translate_off
	initial
		DFFQuotient[119:119] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[119:119] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[119:119] <= wire_DFFQuotient_d[119:119];
	// synopsys translate_off
	initial
		DFFQuotient[120:120] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[120:120] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[120:120] <= wire_DFFQuotient_d[120:120];
	// synopsys translate_off
	initial
		DFFQuotient[121:121] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[121:121] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[121:121] <= wire_DFFQuotient_d[121:121];
	// synopsys translate_off
	initial
		DFFQuotient[122:122] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[122:122] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[122:122] <= wire_DFFQuotient_d[122:122];
	// synopsys translate_off
	initial
		DFFQuotient[123:123] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[123:123] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[123:123] <= wire_DFFQuotient_d[123:123];
	// synopsys translate_off
	initial
		DFFQuotient[124:124] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[124:124] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[124:124] <= wire_DFFQuotient_d[124:124];
	// synopsys translate_off
	initial
		DFFQuotient[125:125] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[125:125] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[125:125] <= wire_DFFQuotient_d[125:125];
	// synopsys translate_off
	initial
		DFFQuotient[126:126] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[126:126] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[126:126] <= wire_DFFQuotient_d[126:126];
	// synopsys translate_off
	initial
		DFFQuotient[127:127] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[127:127] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[127:127] <= wire_DFFQuotient_d[127:127];
	// synopsys translate_off
	initial
		DFFQuotient[128:128] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[128:128] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[128:128] <= wire_DFFQuotient_d[128:128];
	// synopsys translate_off
	initial
		DFFQuotient[129:129] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[129:129] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[129:129] <= wire_DFFQuotient_d[129:129];
	// synopsys translate_off
	initial
		DFFQuotient[130:130] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[130:130] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[130:130] <= wire_DFFQuotient_d[130:130];
	// synopsys translate_off
	initial
		DFFQuotient[131:131] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[131:131] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[131:131] <= wire_DFFQuotient_d[131:131];
	// synopsys translate_off
	initial
		DFFQuotient[132:132] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[132:132] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[132:132] <= wire_DFFQuotient_d[132:132];
	// synopsys translate_off
	initial
		DFFQuotient[133:133] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[133:133] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[133:133] <= wire_DFFQuotient_d[133:133];
	// synopsys translate_off
	initial
		DFFQuotient[134:134] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[134:134] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[134:134] <= wire_DFFQuotient_d[134:134];
	// synopsys translate_off
	initial
		DFFQuotient[135:135] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[135:135] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[135:135] <= wire_DFFQuotient_d[135:135];
	// synopsys translate_off
	initial
		DFFQuotient[136:136] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[136:136] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[136:136] <= wire_DFFQuotient_d[136:136];
	// synopsys translate_off
	initial
		DFFQuotient[137:137] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[137:137] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[137:137] <= wire_DFFQuotient_d[137:137];
	// synopsys translate_off
	initial
		DFFQuotient[138:138] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[138:138] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[138:138] <= wire_DFFQuotient_d[138:138];
	// synopsys translate_off
	initial
		DFFQuotient[139:139] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[139:139] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[139:139] <= wire_DFFQuotient_d[139:139];
	// synopsys translate_off
	initial
		DFFQuotient[140:140] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[140:140] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[140:140] <= wire_DFFQuotient_d[140:140];
	// synopsys translate_off
	initial
		DFFQuotient[141:141] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[141:141] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[141:141] <= wire_DFFQuotient_d[141:141];
	// synopsys translate_off
	initial
		DFFQuotient[142:142] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[142:142] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[142:142] <= wire_DFFQuotient_d[142:142];
	// synopsys translate_off
	initial
		DFFQuotient[143:143] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[143:143] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[143:143] <= wire_DFFQuotient_d[143:143];
	// synopsys translate_off
	initial
		DFFQuotient[144:144] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[144:144] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[144:144] <= wire_DFFQuotient_d[144:144];
	// synopsys translate_off
	initial
		DFFQuotient[145:145] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[145:145] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[145:145] <= wire_DFFQuotient_d[145:145];
	// synopsys translate_off
	initial
		DFFQuotient[146:146] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[146:146] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[146:146] <= wire_DFFQuotient_d[146:146];
	// synopsys translate_off
	initial
		DFFQuotient[147:147] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[147:147] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[147:147] <= wire_DFFQuotient_d[147:147];
	// synopsys translate_off
	initial
		DFFQuotient[148:148] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[148:148] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[148:148] <= wire_DFFQuotient_d[148:148];
	// synopsys translate_off
	initial
		DFFQuotient[149:149] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[149:149] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[149:149] <= wire_DFFQuotient_d[149:149];
	// synopsys translate_off
	initial
		DFFQuotient[150:150] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[150:150] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[150:150] <= wire_DFFQuotient_d[150:150];
	// synopsys translate_off
	initial
		DFFQuotient[151:151] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[151:151] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[151:151] <= wire_DFFQuotient_d[151:151];
	// synopsys translate_off
	initial
		DFFQuotient[152:152] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[152:152] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[152:152] <= wire_DFFQuotient_d[152:152];
	// synopsys translate_off
	initial
		DFFQuotient[153:153] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[153:153] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[153:153] <= wire_DFFQuotient_d[153:153];
	// synopsys translate_off
	initial
		DFFQuotient[154:154] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[154:154] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[154:154] <= wire_DFFQuotient_d[154:154];
	// synopsys translate_off
	initial
		DFFQuotient[155:155] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[155:155] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[155:155] <= wire_DFFQuotient_d[155:155];
	// synopsys translate_off
	initial
		DFFQuotient[156:156] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[156:156] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[156:156] <= wire_DFFQuotient_d[156:156];
	// synopsys translate_off
	initial
		DFFQuotient[157:157] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[157:157] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[157:157] <= wire_DFFQuotient_d[157:157];
	// synopsys translate_off
	initial
		DFFQuotient[158:158] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[158:158] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[158:158] <= wire_DFFQuotient_d[158:158];
	// synopsys translate_off
	initial
		DFFQuotient[159:159] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[159:159] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[159:159] <= wire_DFFQuotient_d[159:159];
	// synopsys translate_off
	initial
		DFFQuotient[160:160] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[160:160] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[160:160] <= wire_DFFQuotient_d[160:160];
	// synopsys translate_off
	initial
		DFFQuotient[161:161] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[161:161] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[161:161] <= wire_DFFQuotient_d[161:161];
	// synopsys translate_off
	initial
		DFFQuotient[162:162] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[162:162] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[162:162] <= wire_DFFQuotient_d[162:162];
	// synopsys translate_off
	initial
		DFFQuotient[163:163] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[163:163] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[163:163] <= wire_DFFQuotient_d[163:163];
	// synopsys translate_off
	initial
		DFFQuotient[164:164] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[164:164] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[164:164] <= wire_DFFQuotient_d[164:164];
	// synopsys translate_off
	initial
		DFFQuotient[165:165] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[165:165] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[165:165] <= wire_DFFQuotient_d[165:165];
	// synopsys translate_off
	initial
		DFFQuotient[166:166] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[166:166] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[166:166] <= wire_DFFQuotient_d[166:166];
	// synopsys translate_off
	initial
		DFFQuotient[167:167] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[167:167] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[167:167] <= wire_DFFQuotient_d[167:167];
	// synopsys translate_off
	initial
		DFFQuotient[168:168] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[168:168] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[168:168] <= wire_DFFQuotient_d[168:168];
	// synopsys translate_off
	initial
		DFFQuotient[169:169] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[169:169] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[169:169] <= wire_DFFQuotient_d[169:169];
	// synopsys translate_off
	initial
		DFFQuotient[170:170] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[170:170] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[170:170] <= wire_DFFQuotient_d[170:170];
	// synopsys translate_off
	initial
		DFFQuotient[171:171] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[171:171] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[171:171] <= wire_DFFQuotient_d[171:171];
	// synopsys translate_off
	initial
		DFFQuotient[172:172] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[172:172] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[172:172] <= wire_DFFQuotient_d[172:172];
	// synopsys translate_off
	initial
		DFFQuotient[173:173] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[173:173] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[173:173] <= wire_DFFQuotient_d[173:173];
	// synopsys translate_off
	initial
		DFFQuotient[174:174] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[174:174] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[174:174] <= wire_DFFQuotient_d[174:174];
	// synopsys translate_off
	initial
		DFFQuotient[175:175] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[175:175] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[175:175] <= wire_DFFQuotient_d[175:175];
	// synopsys translate_off
	initial
		DFFQuotient[176:176] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[176:176] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[176:176] <= wire_DFFQuotient_d[176:176];
	// synopsys translate_off
	initial
		DFFQuotient[177:177] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[177:177] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[177:177] <= wire_DFFQuotient_d[177:177];
	// synopsys translate_off
	initial
		DFFQuotient[178:178] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[178:178] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[178:178] <= wire_DFFQuotient_d[178:178];
	// synopsys translate_off
	initial
		DFFQuotient[179:179] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[179:179] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[179:179] <= wire_DFFQuotient_d[179:179];
	// synopsys translate_off
	initial
		DFFQuotient[180:180] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[180:180] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[180:180] <= wire_DFFQuotient_d[180:180];
	// synopsys translate_off
	initial
		DFFQuotient[181:181] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[181:181] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[181:181] <= wire_DFFQuotient_d[181:181];
	// synopsys translate_off
	initial
		DFFQuotient[182:182] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[182:182] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[182:182] <= wire_DFFQuotient_d[182:182];
	// synopsys translate_off
	initial
		DFFQuotient[183:183] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[183:183] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[183:183] <= wire_DFFQuotient_d[183:183];
	// synopsys translate_off
	initial
		DFFQuotient[184:184] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[184:184] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[184:184] <= wire_DFFQuotient_d[184:184];
	// synopsys translate_off
	initial
		DFFQuotient[185:185] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[185:185] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[185:185] <= wire_DFFQuotient_d[185:185];
	// synopsys translate_off
	initial
		DFFQuotient[186:186] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[186:186] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[186:186] <= wire_DFFQuotient_d[186:186];
	// synopsys translate_off
	initial
		DFFQuotient[187:187] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[187:187] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[187:187] <= wire_DFFQuotient_d[187:187];
	// synopsys translate_off
	initial
		DFFQuotient[188:188] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[188:188] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[188:188] <= wire_DFFQuotient_d[188:188];
	// synopsys translate_off
	initial
		DFFQuotient[189:189] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[189:189] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[189:189] <= wire_DFFQuotient_d[189:189];
	// synopsys translate_off
	initial
		DFFQuotient[190:190] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[190:190] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[190:190] <= wire_DFFQuotient_d[190:190];
	// synopsys translate_off
	initial
		DFFQuotient[191:191] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[191:191] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[191:191] <= wire_DFFQuotient_d[191:191];
	assign
		wire_DFFQuotient_d = {DFFQuotient[159:136], (~ selnose[792]), (~ selnose[825]), (~ selnose[858]), (~ selnose[891]), (~ selnose[924]), (~ selnose[957]), {2{vcc_wire}}, DFFQuotient[127:109], (~ selnose[627]), (~ selnose[660]), (~ selnose[693]), (~ selnose[726]), (~ selnose[759]), {8{vcc_wire}}, DFFQuotient[95:82], (~ selnose[462]), (~ selnose[495]), (~ selnose[528]), (~ selnose[561]), (~ selnose[594]), {13{vcc_wire}}, DFFQuotient[63:56], (~ selnose[264]), (~ selnose[297]), (~ selnose[330]), (~ selnose[363]), (~ selnose[396]), (~ selnose[429]), {18{vcc_wire}}, DFFQuotient[31:29], (~ selnose[99]), (~ selnose[132]), (~ selnose[165]), (~ selnose[198]), (~ selnose[231]), {24{vcc_wire}}, (~ selnose[0]), (~ selnose[33]), (~ selnose[66]), {29{vcc_wire}}};
	// synopsys translate_off
	initial
		DFFStage = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFStage <= 138'b0;
		else if  (clk_en == 1'b1)   DFFStage <= {StageOut[689:667], StageOut[551:529], StageOut[436:414], StageOut[321:299], StageOut[183:161], StageOut[68:46]};
	assign
		wire_add_sub_0_result_int = wire_add_sub_0_dataa - wire_add_sub_0_datab;
	assign
		wire_add_sub_0_result = wire_add_sub_0_result_int[0:0],
		wire_add_sub_0_cout = ~wire_add_sub_0_result_int[1:1];
	assign
		wire_add_sub_0_dataa = NumeratorIn[31],
		wire_add_sub_0_datab = DenominatorIn[0];
	assign
		wire_add_sub_1_result_int = wire_add_sub_1_dataa - wire_add_sub_1_datab;
	assign
		wire_add_sub_1_result = wire_add_sub_1_result_int[1:0],
		wire_add_sub_1_cout = ~wire_add_sub_1_result_int[2:2];
	assign
		wire_add_sub_1_dataa = {StageIn[23], NumeratorIn[62]},
		wire_add_sub_1_datab = DenominatorIn[24:23];
	assign
		wire_add_sub_10_result_int = wire_add_sub_10_dataa - wire_add_sub_10_datab;
	assign
		wire_add_sub_10_result = wire_add_sub_10_result_int[10:0],
		wire_add_sub_10_cout = ~wire_add_sub_10_result_int[11:11];
	assign
		wire_add_sub_10_dataa = {StageIn[239:230], NumeratorIn[341]},
		wire_add_sub_10_datab = DenominatorIn[240:230];
	assign
		wire_add_sub_11_result_int = wire_add_sub_11_dataa - wire_add_sub_11_datab;
	assign
		wire_add_sub_11_result = wire_add_sub_11_result_int[11:0],
		wire_add_sub_11_cout = ~wire_add_sub_11_result_int[12:12];
	assign
		wire_add_sub_11_dataa = {StageIn[263:253], NumeratorIn[372]},
		wire_add_sub_11_datab = DenominatorIn[264:253];
	assign
		wire_add_sub_12_result_int = wire_add_sub_12_dataa - wire_add_sub_12_datab;
	assign
		wire_add_sub_12_result = wire_add_sub_12_result_int[12:0],
		wire_add_sub_12_cout = ~wire_add_sub_12_result_int[13:13];
	assign
		wire_add_sub_12_dataa = {StageIn[287:276], NumeratorIn[403]},
		wire_add_sub_12_datab = DenominatorIn[288:276];
	assign
		wire_add_sub_13_result_int = wire_add_sub_13_dataa - wire_add_sub_13_datab;
	assign
		wire_add_sub_13_result = wire_add_sub_13_result_int[13:0],
		wire_add_sub_13_cout = ~wire_add_sub_13_result_int[14:14];
	assign
		wire_add_sub_13_dataa = {StageIn[311:299], NumeratorIn[434]},
		wire_add_sub_13_datab = DenominatorIn[312:299];
	assign
		wire_add_sub_14_result_int = wire_add_sub_14_dataa - wire_add_sub_14_datab;
	assign
		wire_add_sub_14_result = wire_add_sub_14_result_int[14:0],
		wire_add_sub_14_cout = ~wire_add_sub_14_result_int[15:15];
	assign
		wire_add_sub_14_dataa = {StageIn[335:322], NumeratorIn[465]},
		wire_add_sub_14_datab = DenominatorIn[336:322];
	assign
		wire_add_sub_15_result_int = wire_add_sub_15_dataa - wire_add_sub_15_datab;
	assign
		wire_add_sub_15_result = wire_add_sub_15_result_int[15:0],
		wire_add_sub_15_cout = ~wire_add_sub_15_result_int[16:16];
	assign
		wire_add_sub_15_dataa = {StageIn[359:345], NumeratorIn[496]},
		wire_add_sub_15_datab = DenominatorIn[360:345];
	assign
		wire_add_sub_16_result_int = wire_add_sub_16_dataa - wire_add_sub_16_datab;
	assign
		wire_add_sub_16_result = wire_add_sub_16_result_int[16:0],
		wire_add_sub_16_cout = ~wire_add_sub_16_result_int[17:17];
	assign
		wire_add_sub_16_dataa = {StageIn[383:368], NumeratorIn[527]},
		wire_add_sub_16_datab = DenominatorIn[384:368];
	assign
		wire_add_sub_17_result_int = wire_add_sub_17_dataa - wire_add_sub_17_datab;
	assign
		wire_add_sub_17_result = wire_add_sub_17_result_int[17:0],
		wire_add_sub_17_cout = ~wire_add_sub_17_result_int[18:18];
	assign
		wire_add_sub_17_dataa = {StageIn[407:391], NumeratorIn[558]},
		wire_add_sub_17_datab = DenominatorIn[408:391];
	assign
		wire_add_sub_18_result_int = wire_add_sub_18_dataa - wire_add_sub_18_datab;
	assign
		wire_add_sub_18_result = wire_add_sub_18_result_int[18:0],
		wire_add_sub_18_cout = ~wire_add_sub_18_result_int[19:19];
	assign
		wire_add_sub_18_dataa = {StageIn[431:414], NumeratorIn[589]},
		wire_add_sub_18_datab = DenominatorIn[432:414];
	assign
		wire_add_sub_19_result_int = wire_add_sub_19_dataa - wire_add_sub_19_datab;
	assign
		wire_add_sub_19_result = wire_add_sub_19_result_int[19:0],
		wire_add_sub_19_cout = ~wire_add_sub_19_result_int[20:20];
	assign
		wire_add_sub_19_dataa = {StageIn[455:437], NumeratorIn[620]},
		wire_add_sub_19_datab = DenominatorIn[456:437];
	assign
		wire_add_sub_2_result_int = wire_add_sub_2_dataa - wire_add_sub_2_datab;
	assign
		wire_add_sub_2_result = wire_add_sub_2_result_int[2:0],
		wire_add_sub_2_cout = ~wire_add_sub_2_result_int[3:3];
	assign
		wire_add_sub_2_dataa = {StageIn[47:46], NumeratorIn[93]},
		wire_add_sub_2_datab = DenominatorIn[48:46];
	assign
		wire_add_sub_20_result_int = wire_add_sub_20_dataa - wire_add_sub_20_datab;
	assign
		wire_add_sub_20_result = wire_add_sub_20_result_int[20:0],
		wire_add_sub_20_cout = ~wire_add_sub_20_result_int[21:21];
	assign
		wire_add_sub_20_dataa = {StageIn[479:460], NumeratorIn[651]},
		wire_add_sub_20_datab = DenominatorIn[480:460];
	assign
		wire_add_sub_21_result_int = wire_add_sub_21_dataa - wire_add_sub_21_datab;
	assign
		wire_add_sub_21_result = wire_add_sub_21_result_int[21:0],
		wire_add_sub_21_cout = ~wire_add_sub_21_result_int[22:22];
	assign
		wire_add_sub_21_dataa = {StageIn[503:483], NumeratorIn[682]},
		wire_add_sub_21_datab = DenominatorIn[504:483];
	assign
		wire_add_sub_22_result_int = wire_add_sub_22_dataa - wire_add_sub_22_datab;
	assign
		wire_add_sub_22_result = wire_add_sub_22_result_int[22:0],
		wire_add_sub_22_cout = ~wire_add_sub_22_result_int[23:23];
	assign
		wire_add_sub_22_dataa = {StageIn[527:506], NumeratorIn[713]},
		wire_add_sub_22_datab = DenominatorIn[528:506];
	assign
		wire_add_sub_23_result_int = wire_add_sub_23_dataa - wire_add_sub_23_datab;
	assign
		wire_add_sub_23_result = wire_add_sub_23_result_int[22:0],
		wire_add_sub_23_cout = ~wire_add_sub_23_result_int[23:23];
	assign
		wire_add_sub_23_dataa = {StageIn[550:529], NumeratorIn[744]},
		wire_add_sub_23_datab = DenominatorIn[551:529];
	assign
		wire_add_sub_24_result_int = wire_add_sub_24_dataa - wire_add_sub_24_datab;
	assign
		wire_add_sub_24_result = wire_add_sub_24_result_int[22:0],
		wire_add_sub_24_cout = ~wire_add_sub_24_result_int[23:23];
	assign
		wire_add_sub_24_dataa = {StageIn[573:552], NumeratorIn[775]},
		wire_add_sub_24_datab = DenominatorIn[574:552];
	assign
		wire_add_sub_25_result_int = wire_add_sub_25_dataa - wire_add_sub_25_datab;
	assign
		wire_add_sub_25_result = wire_add_sub_25_result_int[22:0],
		wire_add_sub_25_cout = ~wire_add_sub_25_result_int[23:23];
	assign
		wire_add_sub_25_dataa = {StageIn[596:575], NumeratorIn[806]},
		wire_add_sub_25_datab = DenominatorIn[597:575];
	assign
		wire_add_sub_26_result_int = wire_add_sub_26_dataa - wire_add_sub_26_datab;
	assign
		wire_add_sub_26_result = wire_add_sub_26_result_int[22:0],
		wire_add_sub_26_cout = ~wire_add_sub_26_result_int[23:23];
	assign
		wire_add_sub_26_dataa = {StageIn[619:598], NumeratorIn[837]},
		wire_add_sub_26_datab = DenominatorIn[620:598];
	assign
		wire_add_sub_27_result_int = wire_add_sub_27_dataa - wire_add_sub_27_datab;
	assign
		wire_add_sub_27_result = wire_add_sub_27_result_int[22:0],
		wire_add_sub_27_cout = ~wire_add_sub_27_result_int[23:23];
	assign
		wire_add_sub_27_dataa = {StageIn[642:621], NumeratorIn[868]},
		wire_add_sub_27_datab = DenominatorIn[643:621];
	assign
		wire_add_sub_28_result_int = wire_add_sub_28_dataa - wire_add_sub_28_datab;
	assign
		wire_add_sub_28_result = wire_add_sub_28_result_int[22:0],
		wire_add_sub_28_cout = ~wire_add_sub_28_result_int[23:23];
	assign
		wire_add_sub_28_dataa = {StageIn[665:644], NumeratorIn[899]},
		wire_add_sub_28_datab = DenominatorIn[666:644];
	assign
		wire_add_sub_29_result_int = wire_add_sub_29_dataa - wire_add_sub_29_datab;
	assign
		wire_add_sub_29_result = wire_add_sub_29_result_int[22:0],
		wire_add_sub_29_cout = ~wire_add_sub_29_result_int[23:23];
	assign
		wire_add_sub_29_dataa = {StageIn[688:667], NumeratorIn[930]},
		wire_add_sub_29_datab = DenominatorIn[689:667];
	assign
		wire_add_sub_3_result_int = wire_add_sub_3_dataa - wire_add_sub_3_datab;
	assign
		wire_add_sub_3_result = wire_add_sub_3_result_int[3:0],
		wire_add_sub_3_cout = ~wire_add_sub_3_result_int[4:4];
	assign
		wire_add_sub_3_dataa = {StageIn[71:69], NumeratorIn[124]},
		wire_add_sub_3_datab = DenominatorIn[72:69];
	assign
		wire_add_sub_30_result_int = wire_add_sub_30_dataa - wire_add_sub_30_datab;
	assign
		wire_add_sub_30_result = wire_add_sub_30_result_int[22:0],
		wire_add_sub_30_cout = ~wire_add_sub_30_result_int[23:23];
	assign
		wire_add_sub_30_dataa = {StageIn[711:690], NumeratorIn[961]},
		wire_add_sub_30_datab = DenominatorIn[712:690];
	assign
		wire_add_sub_31_result_int = wire_add_sub_31_dataa - wire_add_sub_31_datab;
	assign
		wire_add_sub_31_result = wire_add_sub_31_result_int[22:0],
		wire_add_sub_31_cout = ~wire_add_sub_31_result_int[23:23];
	assign
		wire_add_sub_31_dataa = {StageIn[734:713], NumeratorIn[992]},
		wire_add_sub_31_datab = DenominatorIn[735:713];
	assign
		wire_add_sub_4_result_int = wire_add_sub_4_dataa - wire_add_sub_4_datab;
	assign
		wire_add_sub_4_result = wire_add_sub_4_result_int[4:0],
		wire_add_sub_4_cout = ~wire_add_sub_4_result_int[5:5];
	assign
		wire_add_sub_4_dataa = {StageIn[95:92], NumeratorIn[155]},
		wire_add_sub_4_datab = DenominatorIn[96:92];
	assign
		wire_add_sub_5_result_int = wire_add_sub_5_dataa - wire_add_sub_5_datab;
	assign
		wire_add_sub_5_result = wire_add_sub_5_result_int[5:0],
		wire_add_sub_5_cout = ~wire_add_sub_5_result_int[6:6];
	assign
		wire_add_sub_5_dataa = {StageIn[119:115], NumeratorIn[186]},
		wire_add_sub_5_datab = DenominatorIn[120:115];
	assign
		wire_add_sub_6_result_int = wire_add_sub_6_dataa - wire_add_sub_6_datab;
	assign
		wire_add_sub_6_result = wire_add_sub_6_result_int[6:0],
		wire_add_sub_6_cout = ~wire_add_sub_6_result_int[7:7];
	assign
		wire_add_sub_6_dataa = {StageIn[143:138], NumeratorIn[217]},
		wire_add_sub_6_datab = DenominatorIn[144:138];
	assign
		wire_add_sub_7_result_int = wire_add_sub_7_dataa - wire_add_sub_7_datab;
	assign
		wire_add_sub_7_result = wire_add_sub_7_result_int[7:0],
		wire_add_sub_7_cout = ~wire_add_sub_7_result_int[8:8];
	assign
		wire_add_sub_7_dataa = {StageIn[167:161], NumeratorIn[248]},
		wire_add_sub_7_datab = DenominatorIn[168:161];
	assign
		wire_add_sub_8_result_int = wire_add_sub_8_dataa - wire_add_sub_8_datab;
	assign
		wire_add_sub_8_result = wire_add_sub_8_result_int[8:0],
		wire_add_sub_8_cout = ~wire_add_sub_8_result_int[9:9];
	assign
		wire_add_sub_8_dataa = {StageIn[191:184], NumeratorIn[279]},
		wire_add_sub_8_datab = DenominatorIn[192:184];
	assign
		wire_add_sub_9_result_int = wire_add_sub_9_dataa - wire_add_sub_9_datab;
	assign
		wire_add_sub_9_result = wire_add_sub_9_result_int[9:0],
		wire_add_sub_9_cout = ~wire_add_sub_9_result_int[10:10];
	assign
		wire_add_sub_9_dataa = {StageIn[215:207], NumeratorIn[310]},
		wire_add_sub_9_datab = DenominatorIn[216:207];
	assign
		aclr = 1'b0,
		clk_en = 1'b1,
		DenominatorIn = DenominatorIn_tmp,
		DenominatorIn_tmp = {DenominatorIn[735:690], {gnd_wire, DFFDenominator[131:110]}, DenominatorIn[666:552], {gnd_wire, DFFDenominator[109:88]}, DenominatorIn[528:437], {gnd_wire, DFFDenominator[87:66]}, DenominatorIn[413:322], {gnd_wire, DFFDenominator[65:44]}, DenominatorIn[298:184], {gnd_wire, DFFDenominator[43:22]}, DenominatorIn[160:69], {gnd_wire, DFFDenominator[21:0]}, DenominatorIn[45:0], {gnd_wire, denominator}},
		gnd_wire = 1'b0,
		nose = {{32{1'b0}}, wire_add_sub_31_cout, {32{1'b0}}, wire_add_sub_30_cout, {32{1'b0}}, wire_add_sub_29_cout, {32{1'b0}}, wire_add_sub_28_cout, {32{1'b0}}, wire_add_sub_27_cout, {32{1'b0}}, wire_add_sub_26_cout, {32{1'b0}}, wire_add_sub_25_cout, {32{1'b0}}, wire_add_sub_24_cout, {32{1'b0}}, wire_add_sub_23_cout, {32{1'b0}}, wire_add_sub_22_cout, {32{1'b0}}, wire_add_sub_21_cout, {32{1'b0}}, wire_add_sub_20_cout, {32{1'b0}}, wire_add_sub_19_cout, {32{1'b0}}, wire_add_sub_18_cout, {32{1'b0}}, wire_add_sub_17_cout, {32{1'b0}}, wire_add_sub_16_cout, {32{1'b0}}, wire_add_sub_15_cout, {32{1'b0}}, wire_add_sub_14_cout, {32{1'b0}}, wire_add_sub_13_cout, {32{1'b0}}, wire_add_sub_12_cout, {32{1'b0}}, wire_add_sub_11_cout, {32{1'b0}}, wire_add_sub_10_cout, {32{1'b0}}, wire_add_sub_9_cout, {32{1'b0}}, wire_add_sub_8_cout, {32{1'b0}}, wire_add_sub_7_cout, {32{1'b0}}, wire_add_sub_6_cout, {32{1'b0}}, wire_add_sub_5_cout, {32{1'b0}}, wire_add_sub_4_cout, {32{1'b0}}, wire_add_sub_3_cout, {32{1'b0}}, wire_add_sub_2_cout, {32{1'b0}}, wire_add_sub_1_cout, {32{1'b0}}, wire_add_sub_0_cout},
		NumeratorIn = NumeratorIn_tmp,
		NumeratorIn_tmp = {NumeratorIn[1023:960], DFFNumerator[191:160], NumeratorIn[927:768], DFFNumerator[159:128], NumeratorIn[735:608], DFFNumerator[127:96], NumeratorIn[575:448], DFFNumerator[95:64], NumeratorIn[415:256], DFFNumerator[63:32], NumeratorIn[223:96], DFFNumerator[31:0], NumeratorIn[63:0], numerator},
		prestg = {wire_add_sub_31_result, wire_add_sub_30_result, wire_add_sub_29_result, wire_add_sub_28_result, wire_add_sub_27_result, wire_add_sub_26_result, wire_add_sub_25_result, wire_add_sub_24_result, wire_add_sub_23_result, wire_add_sub_22_result, {1{1'b0}}, wire_add_sub_21_result, {2{1'b0}}, wire_add_sub_20_result, {3{1'b0}}, wire_add_sub_19_result, {4{1'b0}}, wire_add_sub_18_result, {5{1'b0}}, wire_add_sub_17_result, {6{1'b0}}, wire_add_sub_16_result, {7{1'b0}}, wire_add_sub_15_result, {8{1'b0}}, wire_add_sub_14_result, {9{1'b0}}, wire_add_sub_13_result, {10{1'b0}}, wire_add_sub_12_result, {11{1'b0}}, wire_add_sub_11_result, {12{1'b0}}, wire_add_sub_10_result, {13{1'b0}}, wire_add_sub_9_result, {14{1'b0}}, wire_add_sub_8_result, {15{1'b0}}, wire_add_sub_7_result, {16{1'b0}}, wire_add_sub_6_result, {17{1'b0}}, wire_add_sub_5_result, {18{1'b0}}, wire_add_sub_4_result, {19{1'b0}}, wire_add_sub_3_result, {20{1'b0}}, wire_add_sub_2_result, {21{1'b0}}, wire_add_sub_1_result, {22{1'b0}}, wire_add_sub_0_result},
		quotient = quotient_tmp,
		quotient_tmp = {DFFQuotient[191:162], (~ selnose[990]), (~ selnose[1023])},
		remainder = StageIn[757:736],
		sel = {gnd_wire, (sel[725] | DenominatorIn[757]), (sel[724] | DenominatorIn[756]), (sel[723] | DenominatorIn[755]), (sel[722] | DenominatorIn[754]), (sel[721] | DenominatorIn[753]), (sel[720] | DenominatorIn[752]), (sel[719] | DenominatorIn[751]), (sel[718] | DenominatorIn[750]), (sel[717] | DenominatorIn[749]), (sel[716] | DenominatorIn[748]), (sel[715] | DenominatorIn[747]), (sel[714] | DenominatorIn[746]), (sel[713] | DenominatorIn[745]), (sel[712] | DenominatorIn[744]), (sel[711] | DenominatorIn[743]), (sel[710] | DenominatorIn[742]), (sel[709] | DenominatorIn[741]), (sel[708] | DenominatorIn[740]), (sel[707] | DenominatorIn[739]), (sel[706] | DenominatorIn[738]), (sel[705] | DenominatorIn[737]), gnd_wire, (sel[703] | DenominatorIn[734]), (sel[702] | DenominatorIn[733]), (sel[701] | DenominatorIn[732]), (sel[700] | DenominatorIn[731]), (sel[699] | DenominatorIn[730]), (sel[698] | DenominatorIn[729]), (sel[697] | DenominatorIn[728]), (sel[696] | DenominatorIn[727]), (sel[695] | DenominatorIn[726]), (sel[694] | DenominatorIn[725]), (sel[693] | DenominatorIn[724]), (sel[692] | DenominatorIn[723]), (sel[691] | DenominatorIn[722]), (sel[690] | DenominatorIn[721]), (sel[689] | DenominatorIn[720]), (sel[688] | DenominatorIn[719]), (sel[687] | DenominatorIn[718]), (sel[686] | DenominatorIn[717]), (sel[685] | DenominatorIn[716]), (sel[684] | DenominatorIn[715]), (sel[683] | DenominatorIn[714]), gnd_wire, (sel[681] | DenominatorIn[711]), (sel[680] | DenominatorIn[710]), (sel[679] | DenominatorIn[709]), (sel[678] | DenominatorIn[708]), (sel[677] | DenominatorIn[707]), (sel[676] | DenominatorIn[706]), (sel[675] | DenominatorIn[705]), (sel[674] | DenominatorIn[704]), (sel[673] | DenominatorIn[703]), (sel[672] | DenominatorIn[702]), (sel[671] | DenominatorIn[701]), (sel[670] | DenominatorIn[700]), (sel[669] | DenominatorIn[699]), (sel[668] | DenominatorIn[698]), (sel[667] | DenominatorIn[697]), (sel[666] | DenominatorIn[696]), (sel[665] | DenominatorIn[695]), (sel[664] | DenominatorIn[694]), (sel[663] | DenominatorIn[693]
), (sel[662] | DenominatorIn[692]), (sel[661] | DenominatorIn[691]), gnd_wire, (sel[659] | DenominatorIn[688]), (sel[658] | DenominatorIn[687]), (sel[657] | DenominatorIn[686]), (sel[656] | DenominatorIn[685]), (sel[655] | DenominatorIn[684]), (sel[654] | DenominatorIn[683]), (sel[653] | DenominatorIn[682]), (sel[652] | DenominatorIn[681]), (sel[651] | DenominatorIn[680]), (sel[650] | DenominatorIn[679]), (sel[649] | DenominatorIn[678]), (sel[648] | DenominatorIn[677]), (sel[647] | DenominatorIn[676]), (sel[646] | DenominatorIn[675]), (sel[645] | DenominatorIn[674]), (sel[644] | DenominatorIn[673]), (sel[643] | DenominatorIn[672]), (sel[642] | DenominatorIn[671]), (sel[641] | DenominatorIn[670]), (sel[640] | DenominatorIn[669]), (sel[639] | DenominatorIn[668]), gnd_wire, (sel[637] | DenominatorIn[665]), (sel[636] | DenominatorIn[664]), (sel[635] | DenominatorIn[663]), (sel[634] | DenominatorIn[662]), (sel[633] | DenominatorIn[661]), (sel[632] | DenominatorIn[660]), (sel[631] | DenominatorIn[659]), (sel[630] | DenominatorIn[658]), (sel[629] | DenominatorIn[657]), (sel[628] | DenominatorIn[656]), (sel[627] | DenominatorIn[655]), (sel[626] | DenominatorIn[654]), (sel[625] | DenominatorIn[653]), (sel[624] | DenominatorIn[652]), (sel[623] | DenominatorIn[651]), (sel[622] | DenominatorIn[650]), (sel[621] | DenominatorIn[649]), (sel[620] | DenominatorIn[648]), (sel[619] | DenominatorIn[647]), (sel[618] | DenominatorIn[646]), (sel[617] | DenominatorIn[645]), gnd_wire, (sel[615] | DenominatorIn[642]), (sel[614] | DenominatorIn[641]), (sel[613] | DenominatorIn[640]), (sel[612] | DenominatorIn[639]), (sel[611] | DenominatorIn[638]), (sel[610] | DenominatorIn[637]), (sel[609] | DenominatorIn[636]), (sel[608] | DenominatorIn[635]), (sel[607] | DenominatorIn[634]), (sel[606] | DenominatorIn[633]), (sel[605] | DenominatorIn[632]), (sel[604] | DenominatorIn[631]), (sel[603] | DenominatorIn[630]), (sel[602] | DenominatorIn[629]), (sel[601] | DenominatorIn[628]), (sel[600] | DenominatorIn[627]), (sel[599] | DenominatorIn[626]), (sel[598]
 | DenominatorIn[625]), (sel[597] | DenominatorIn[624]), (sel[596] | DenominatorIn[623]), (sel[595] | DenominatorIn[622]), gnd_wire, (sel[593] | DenominatorIn[619]), (sel[592] | DenominatorIn[618]), (sel[591] | DenominatorIn[617]), (sel[590] | DenominatorIn[616]), (sel[589] | DenominatorIn[615]), (sel[588] | DenominatorIn[614]), (sel[587] | DenominatorIn[613]), (sel[586] | DenominatorIn[612]), (sel[585] | DenominatorIn[611]), (sel[584] | DenominatorIn[610]), (sel[583] | DenominatorIn[609]), (sel[582] | DenominatorIn[608]), (sel[581] | DenominatorIn[607]), (sel[580] | DenominatorIn[606]), (sel[579] | DenominatorIn[605]), (sel[578] | DenominatorIn[604]), (sel[577] | DenominatorIn[603]), (sel[576] | DenominatorIn[602]), (sel[575] | DenominatorIn[601]), (sel[574] | DenominatorIn[600]), (sel[573] | DenominatorIn[599]), gnd_wire, (sel[571] | DenominatorIn[596]), (sel[570] | DenominatorIn[595]), (sel[569] | DenominatorIn[594]), (sel[568] | DenominatorIn[593]), (sel[567] | DenominatorIn[592]), (sel[566] | DenominatorIn[591]), (sel[565] | DenominatorIn[590]), (sel[564] | DenominatorIn[589]), (sel[563] | DenominatorIn[588]), (sel[562] | DenominatorIn[587]), (sel[561] | DenominatorIn[586]), (sel[560] | DenominatorIn[585]), (sel[559] | DenominatorIn[584]), (sel[558] | DenominatorIn[583]), (sel[557] | DenominatorIn[582]), (sel[556] | DenominatorIn[581]), (sel[555] | DenominatorIn[580]), (sel[554] | DenominatorIn[579]), (sel[553] | DenominatorIn[578]), (sel[552] | DenominatorIn[577]), (sel[551] | DenominatorIn[576]), gnd_wire, (sel[549] | DenominatorIn[573]), (sel[548] | DenominatorIn[572]), (sel[547] | DenominatorIn[571]), (sel[546] | DenominatorIn[570]), (sel[545] | DenominatorIn[569]), (sel[544] | DenominatorIn[568]), (sel[543] | DenominatorIn[567]), (sel[542] | DenominatorIn[566]), (sel[541] | DenominatorIn[565]), (sel[540] | DenominatorIn[564]), (sel[539] | DenominatorIn[563]), (sel[538] | DenominatorIn[562]), (sel[537] | DenominatorIn[561]), (sel[536] | DenominatorIn[560]), (sel[535] | DenominatorIn[559]), (sel[534] | DenominatorIn[558]
), (sel[533] | DenominatorIn[557]), (sel[532] | DenominatorIn[556]), (sel[531] | DenominatorIn[555]), (sel[530] | DenominatorIn[554]), (sel[529] | DenominatorIn[553]), gnd_wire, (sel[527] | DenominatorIn[550]), (sel[526] | DenominatorIn[549]), (sel[525] | DenominatorIn[548]), (sel[524] | DenominatorIn[547]), (sel[523] | DenominatorIn[546]), (sel[522] | DenominatorIn[545]), (sel[521] | DenominatorIn[544]), (sel[520] | DenominatorIn[543]), (sel[519] | DenominatorIn[542]), (sel[518] | DenominatorIn[541]), (sel[517] | DenominatorIn[540]), (sel[516] | DenominatorIn[539]), (sel[515] | DenominatorIn[538]), (sel[514] | DenominatorIn[537]), (sel[513] | DenominatorIn[536]), (sel[512] | DenominatorIn[535]), (sel[511] | DenominatorIn[534]), (sel[510] | DenominatorIn[533]), (sel[509] | DenominatorIn[532]), (sel[508] | DenominatorIn[531]), (sel[507] | DenominatorIn[530]), gnd_wire, (sel[505] | DenominatorIn[527]), (sel[504] | DenominatorIn[526]), (sel[503] | DenominatorIn[525]), (sel[502] | DenominatorIn[524]), (sel[501] | DenominatorIn[523]), (sel[500] | DenominatorIn[522]), (sel[499] | DenominatorIn[521]), (sel[498] | DenominatorIn[520]), (sel[497] | DenominatorIn[519]), (sel[496] | DenominatorIn[518]), (sel[495] | DenominatorIn[517]), (sel[494] | DenominatorIn[516]), (sel[493] | DenominatorIn[515]), (sel[492] | DenominatorIn[514]), (sel[491] | DenominatorIn[513]), (sel[490] | DenominatorIn[512]), (sel[489] | DenominatorIn[511]), (sel[488] | DenominatorIn[510]), (sel[487] | DenominatorIn[509]), (sel[486] | DenominatorIn[508]), (sel[485] | DenominatorIn[507]), gnd_wire, (sel[483] | DenominatorIn[504]), (sel[482] | DenominatorIn[503]), (sel[481] | DenominatorIn[502]), (sel[480] | DenominatorIn[501]), (sel[479] | DenominatorIn[500]), (sel[478] | DenominatorIn[499]), (sel[477] | DenominatorIn[498]), (sel[476] | DenominatorIn[497]), (sel[475] | DenominatorIn[496]), (sel[474] | DenominatorIn[495]), (sel[473] | DenominatorIn[494]), (sel[472] | DenominatorIn[493]), (sel[471] | DenominatorIn[492]), (sel[470] | DenominatorIn[491]), (sel[469]
 | DenominatorIn[490]), (sel[468] | DenominatorIn[489]), (sel[467] | DenominatorIn[488]), (sel[466] | DenominatorIn[487]), (sel[465] | DenominatorIn[486]), (sel[464] | DenominatorIn[485]), (sel[463] | DenominatorIn[484]), gnd_wire, (sel[461] | DenominatorIn[481]), (sel[460] | DenominatorIn[480]), (sel[459] | DenominatorIn[479]), (sel[458] | DenominatorIn[478]), (sel[457] | DenominatorIn[477]), (sel[456] | DenominatorIn[476]), (sel[455] | DenominatorIn[475]), (sel[454] | DenominatorIn[474]), (sel[453] | DenominatorIn[473]), (sel[452] | DenominatorIn[472]), (sel[451] | DenominatorIn[471]), (sel[450] | DenominatorIn[470]), (sel[449] | DenominatorIn[469]), (sel[448] | DenominatorIn[468]), (sel[447] | DenominatorIn[467]), (sel[446] | DenominatorIn[466]), (sel[445] | DenominatorIn[465]), (sel[444] | DenominatorIn[464]), (sel[443] | DenominatorIn[463]), (sel[442] | DenominatorIn[462]), (sel[441] | DenominatorIn[461]), gnd_wire, (sel[439] | DenominatorIn[458]), (sel[438] | DenominatorIn[457]), (sel[437] | DenominatorIn[456]), (sel[436] | DenominatorIn[455]), (sel[435] | DenominatorIn[454]), (sel[434] | DenominatorIn[453]), (sel[433] | DenominatorIn[452]), (sel[432] | DenominatorIn[451]), (sel[431] | DenominatorIn[450]), (sel[430] | DenominatorIn[449]), (sel[429] | DenominatorIn[448]), (sel[428] | DenominatorIn[447]), (sel[427] | DenominatorIn[446]), (sel[426] | DenominatorIn[445]), (sel[425] | DenominatorIn[444]), (sel[424] | DenominatorIn[443]), (sel[423] | DenominatorIn[442]), (sel[422] | DenominatorIn[441]), (sel[421] | DenominatorIn[440]), (sel[420] | DenominatorIn[439]), (sel[419] | DenominatorIn[438]), gnd_wire, (sel[417] | DenominatorIn[435]), (sel[416] | DenominatorIn[434]), (sel[415] | DenominatorIn[433]), (sel[414] | DenominatorIn[432]), (sel[413] | DenominatorIn[431]), (sel[412] | DenominatorIn[430]), (sel[411] | DenominatorIn[429]), (sel[410] | DenominatorIn[428]), (sel[409] | DenominatorIn[427]), (sel[408] | DenominatorIn[426]), (sel[407] | DenominatorIn[425]), (sel[406] | DenominatorIn[424]), (sel[405] | DenominatorIn[423]
), (sel[404] | DenominatorIn[422]), (sel[403] | DenominatorIn[421]), (sel[402] | DenominatorIn[420]), (sel[401] | DenominatorIn[419]), (sel[400] | DenominatorIn[418]), (sel[399] | DenominatorIn[417]), (sel[398] | DenominatorIn[416]), (sel[397] | DenominatorIn[415]), gnd_wire, (sel[395] | DenominatorIn[412]), (sel[394] | DenominatorIn[411]), (sel[393] | DenominatorIn[410]), (sel[392] | DenominatorIn[409]), (sel[391] | DenominatorIn[408]), (sel[390] | DenominatorIn[407]), (sel[389] | DenominatorIn[406]), (sel[388] | DenominatorIn[405]), (sel[387] | DenominatorIn[404]), (sel[386] | DenominatorIn[403]), (sel[385] | DenominatorIn[402]), (sel[384] | DenominatorIn[401]), (sel[383] | DenominatorIn[400]), (sel[382] | DenominatorIn[399]), (sel[381] | DenominatorIn[398]), (sel[380] | DenominatorIn[397]), (sel[379] | DenominatorIn[396]), (sel[378] | DenominatorIn[395]), (sel[377] | DenominatorIn[394]), (sel[376] | DenominatorIn[393]), (sel[375] | DenominatorIn[392]), gnd_wire, (sel[373] | DenominatorIn[389]), (sel[372] | DenominatorIn[388]), (sel[371] | DenominatorIn[387]), (sel[370] | DenominatorIn[386]), (sel[369] | DenominatorIn[385]), (sel[368] | DenominatorIn[384]), (sel[367] | DenominatorIn[383]), (sel[366] | DenominatorIn[382]), (sel[365] | DenominatorIn[381]), (sel[364] | DenominatorIn[380]), (sel[363] | DenominatorIn[379]), (sel[362] | DenominatorIn[378]), (sel[361] | DenominatorIn[377]), (sel[360] | DenominatorIn[376]), (sel[359] | DenominatorIn[375]), (sel[358] | DenominatorIn[374]), (sel[357] | DenominatorIn[373]), (sel[356] | DenominatorIn[372]), (sel[355] | DenominatorIn[371]), (sel[354] | DenominatorIn[370]), (sel[353] | DenominatorIn[369]), gnd_wire, (sel[351] | DenominatorIn[366]), (sel[350] | DenominatorIn[365]), (sel[349] | DenominatorIn[364]), (sel[348] | DenominatorIn[363]), (sel[347] | DenominatorIn[362]), (sel[346] | DenominatorIn[361]), (sel[345] | DenominatorIn[360]), (sel[344] | DenominatorIn[359]), (sel[343] | DenominatorIn[358]), (sel[342] | DenominatorIn[357]), (sel[341] | DenominatorIn[356]), (sel[340]
 | DenominatorIn[355]), (sel[339] | DenominatorIn[354]), (sel[338] | DenominatorIn[353]), (sel[337] | DenominatorIn[352]), (sel[336] | DenominatorIn[351]), (sel[335] | DenominatorIn[350]), (sel[334] | DenominatorIn[349]), (sel[333] | DenominatorIn[348]), (sel[332] | DenominatorIn[347]), (sel[331] | DenominatorIn[346]), gnd_wire, (sel[329] | DenominatorIn[343]), (sel[328] | DenominatorIn[342]), (sel[327] | DenominatorIn[341]), (sel[326] | DenominatorIn[340]), (sel[325] | DenominatorIn[339]), (sel[324] | DenominatorIn[338]), (sel[323] | DenominatorIn[337]), (sel[322] | DenominatorIn[336]), (sel[321] | DenominatorIn[335]), (sel[320] | DenominatorIn[334]), (sel[319] | DenominatorIn[333]), (sel[318] | DenominatorIn[332]), (sel[317] | DenominatorIn[331]), (sel[316] | DenominatorIn[330]), (sel[315] | DenominatorIn[329]), (sel[314] | DenominatorIn[328]), (sel[313] | DenominatorIn[327]), (sel[312] | DenominatorIn[326]), (sel[311] | DenominatorIn[325]), (sel[310] | DenominatorIn[324]), (sel[309] | DenominatorIn[323]), gnd_wire, (sel[307] | DenominatorIn[320]), (sel[306] | DenominatorIn[319]), (sel[305] | DenominatorIn[318]), (sel[304] | DenominatorIn[317]), (sel[303] | DenominatorIn[316]), (sel[302] | DenominatorIn[315]), (sel[301] | DenominatorIn[314]), (sel[300] | DenominatorIn[313]), (sel[299] | DenominatorIn[312]), (sel[298] | DenominatorIn[311]), (sel[297] | DenominatorIn[310]), (sel[296] | DenominatorIn[309]), (sel[295] | DenominatorIn[308]), (sel[294] | DenominatorIn[307]), (sel[293] | DenominatorIn[306]), (sel[292] | DenominatorIn[305]), (sel[291] | DenominatorIn[304]), (sel[290] | DenominatorIn[303]), (sel[289] | DenominatorIn[302]), (sel[288] | DenominatorIn[301]), (sel[287] | DenominatorIn[300]), gnd_wire, (sel[285] | DenominatorIn[297]), (sel[284] | DenominatorIn[296]), (sel[283] | DenominatorIn[295]), (sel[282] | DenominatorIn[294]), (sel[281] | DenominatorIn[293]), (sel[280] | DenominatorIn[292]), (sel[279] | DenominatorIn[291]), (sel[278] | DenominatorIn[290]), (sel[277] | DenominatorIn[289]), (sel[276] | DenominatorIn[288]
), (sel[275] | DenominatorIn[287]), (sel[274] | DenominatorIn[286]), (sel[273] | DenominatorIn[285]), (sel[272] | DenominatorIn[284]), (sel[271] | DenominatorIn[283]), (sel[270] | DenominatorIn[282]), (sel[269] | DenominatorIn[281]), (sel[268] | DenominatorIn[280]), (sel[267] | DenominatorIn[279]), (sel[266] | DenominatorIn[278]), (sel[265] | DenominatorIn[277]), gnd_wire, (sel[263] | DenominatorIn[274]), (sel[262] | DenominatorIn[273]), (sel[261] | DenominatorIn[272]), (sel[260] | DenominatorIn[271]), (sel[259] | DenominatorIn[270]), (sel[258] | DenominatorIn[269]), (sel[257] | DenominatorIn[268]), (sel[256] | DenominatorIn[267]), (sel[255] | DenominatorIn[266]), (sel[254] | DenominatorIn[265]), (sel[253] | DenominatorIn[264]), (sel[252] | DenominatorIn[263]), (sel[251] | DenominatorIn[262]), (sel[250] | DenominatorIn[261]), (sel[249] | DenominatorIn[260]), (sel[248] | DenominatorIn[259]), (sel[247] | DenominatorIn[258]), (sel[246] | DenominatorIn[257]), (sel[245] | DenominatorIn[256]), (sel[244] | DenominatorIn[255]), (sel[243] | DenominatorIn[254]), gnd_wire, (sel[241] | DenominatorIn[251]), (sel[240] | DenominatorIn[250]), (sel[239] | DenominatorIn[249]), (sel[238] | DenominatorIn[248]), (sel[237] | DenominatorIn[247]), (sel[236] | DenominatorIn[246]), (sel[235] | DenominatorIn[245]), (sel[234] | DenominatorIn[244]), (sel[233] | DenominatorIn[243]), (sel[232] | DenominatorIn[242]), (sel[231] | DenominatorIn[241]), (sel[230] | DenominatorIn[240]), (sel[229] | DenominatorIn[239]), (sel[228] | DenominatorIn[238]), (sel[227] | DenominatorIn[237]), (sel[226] | DenominatorIn[236]), (sel[225] | DenominatorIn[235]), (sel[224] | DenominatorIn[234]), (sel[223] | DenominatorIn[233]), (sel[222] | DenominatorIn[232]), (sel[221] | DenominatorIn[231]), gnd_wire, (sel[219] | DenominatorIn[228]), (sel[218] | DenominatorIn[227]), (sel[217] | DenominatorIn[226]), (sel[216] | DenominatorIn[225]), (sel[215] | DenominatorIn[224]), (sel[214] | DenominatorIn[223]), (sel[213] | DenominatorIn[222]), (sel[212] | DenominatorIn[221]), (sel[211]
 | DenominatorIn[220]), (sel[210] | DenominatorIn[219]), (sel[209] | DenominatorIn[218]), (sel[208] | DenominatorIn[217]), (sel[207] | DenominatorIn[216]), (sel[206] | DenominatorIn[215]), (sel[205] | DenominatorIn[214]), (sel[204] | DenominatorIn[213]), (sel[203] | DenominatorIn[212]), (sel[202] | DenominatorIn[211]), (sel[201] | DenominatorIn[210]), (sel[200] | DenominatorIn[209]), (sel[199] | DenominatorIn[208]), gnd_wire, (sel[197] | DenominatorIn[205]), (sel[196] | DenominatorIn[204]), (sel[195] | DenominatorIn[203]), (sel[194] | DenominatorIn[202]), (sel[193] | DenominatorIn[201]), (sel[192] | DenominatorIn[200]), (sel[191] | DenominatorIn[199]), (sel[190] | DenominatorIn[198]), (sel[189] | DenominatorIn[197]), (sel[188] | DenominatorIn[196]), (sel[187] | DenominatorIn[195]), (sel[186] | DenominatorIn[194]), (sel[185] | DenominatorIn[193]), (sel[184] | DenominatorIn[192]), (sel[183] | DenominatorIn[191]), (sel[182] | DenominatorIn[190]), (sel[181] | DenominatorIn[189]), (sel[180] | DenominatorIn[188]), (sel[179] | DenominatorIn[187]), (sel[178] | DenominatorIn[186]), (sel[177] | DenominatorIn[185]), gnd_wire, (sel[175] | DenominatorIn[182]), (sel[174] | DenominatorIn[181]), (sel[173] | DenominatorIn[180]), (sel[172] | DenominatorIn[179]), (sel[171] | DenominatorIn[178]), (sel[170] | DenominatorIn[177]), (sel[169] | DenominatorIn[176]), (sel[168] | DenominatorIn[175]), (sel[167] | DenominatorIn[174]), (sel[166] | DenominatorIn[173]), (sel[165] | DenominatorIn[172]), (sel[164] | DenominatorIn[171]), (sel[163] | DenominatorIn[170]), (sel[162] | DenominatorIn[169]), (sel[161] | DenominatorIn[168]), (sel[160] | DenominatorIn[167]), (sel[159] | DenominatorIn[166]), (sel[158] | DenominatorIn[165]), (sel[157] | DenominatorIn[164]), (sel[156] | DenominatorIn[163]), (sel[155] | DenominatorIn[162]), gnd_wire, (sel[153] | DenominatorIn[159]), (sel[152] | DenominatorIn[158]), (sel[151] | DenominatorIn[157]), (sel[150] | DenominatorIn[156]), (sel[149] | DenominatorIn[155]), (sel[148] | DenominatorIn[154]), (sel[147] | DenominatorIn[153]
), (sel[146] | DenominatorIn[152]), (sel[145] | DenominatorIn[151]), (sel[144] | DenominatorIn[150]), (sel[143] | DenominatorIn[149]), (sel[142] | DenominatorIn[148]), (sel[141] | DenominatorIn[147]), (sel[140] | DenominatorIn[146]), (sel[139] | DenominatorIn[145]), (sel[138] | DenominatorIn[144]), (sel[137] | DenominatorIn[143]), (sel[136] | DenominatorIn[142]), (sel[135] | DenominatorIn[141]), (sel[134] | DenominatorIn[140]), (sel[133] | DenominatorIn[139]), gnd_wire, (sel[131] | DenominatorIn[136]), (sel[130] | DenominatorIn[135]), (sel[129] | DenominatorIn[134]), (sel[128] | DenominatorIn[133]), (sel[127] | DenominatorIn[132]), (sel[126] | DenominatorIn[131]), (sel[125] | DenominatorIn[130]), (sel[124] | DenominatorIn[129]), (sel[123] | DenominatorIn[128]), (sel[122] | DenominatorIn[127]), (sel[121] | DenominatorIn[126]), (sel[120] | DenominatorIn[125]), (sel[119] | DenominatorIn[124]), (sel[118] | DenominatorIn[123]), (sel[117] | DenominatorIn[122]), (sel[116] | DenominatorIn[121]), (sel[115] | DenominatorIn[120]), (sel[114] | DenominatorIn[119]), (sel[113] | DenominatorIn[118]), (sel[112] | DenominatorIn[117]), (sel[111] | DenominatorIn[116]), gnd_wire, (sel[109] | DenominatorIn[113]), (sel[108] | DenominatorIn[112]), (sel[107] | DenominatorIn[111]), (sel[106] | DenominatorIn[110]), (sel[105] | DenominatorIn[109]), (sel[104] | DenominatorIn[108]), (sel[103] | DenominatorIn[107]), (sel[102] | DenominatorIn[106]), (sel[101] | DenominatorIn[105]), (sel[100] | DenominatorIn[104]), (sel[99] | DenominatorIn[103]), (sel[98] | DenominatorIn[102]), (sel[97] | DenominatorIn[101]), (sel[96] | DenominatorIn[100]), (sel[95] | DenominatorIn[99]), (sel[94] | DenominatorIn[98]), (sel[93] | DenominatorIn[97]), (sel[92] | DenominatorIn[96]), (sel[91] | DenominatorIn[95]), (sel[90] | DenominatorIn[94]), (sel[89] | DenominatorIn[93]), gnd_wire, (sel[87] | DenominatorIn[90]), (sel[86] | DenominatorIn[89]), (sel[85] | DenominatorIn[88]), (sel[84] | DenominatorIn[87]), (sel[83] | DenominatorIn[86]), (sel[82] | DenominatorIn[85]),
 (sel[81] | DenominatorIn[84]), (sel[80] | DenominatorIn[83]), (sel[79] | DenominatorIn[82]), (sel[78] | DenominatorIn[81]), (sel[77] | DenominatorIn[80]), (sel[76] | DenominatorIn[79]), (sel[75] | DenominatorIn[78]), (sel[74] | DenominatorIn[77]), (sel[73] | DenominatorIn[76]), (sel[72] | DenominatorIn[75]), (sel[71] | DenominatorIn[74]), (sel[70] | DenominatorIn[73]), (sel[69] | DenominatorIn[72]), (sel[68] | DenominatorIn[71]), (sel[67] | DenominatorIn[70]), gnd_wire, (sel[65] | DenominatorIn[67]), (sel[64] | DenominatorIn[66]), (sel[63] | DenominatorIn[65]), (sel[62] | DenominatorIn[64]), (sel[61] | DenominatorIn[63]), (sel[60] | DenominatorIn[62]), (sel[59] | DenominatorIn[61]), (sel[58] | DenominatorIn[60]), (sel[57] | DenominatorIn[59]), (sel[56] | DenominatorIn[58]), (sel[55] | DenominatorIn[57]), (sel[54] | DenominatorIn[56]), (sel[53] | DenominatorIn[55]), (sel[52] | DenominatorIn[54]), (sel[51] | DenominatorIn[53]), (sel[50] | DenominatorIn[52]), (sel[49] | DenominatorIn[51]), (sel[48] | DenominatorIn[50]), (sel[47] | DenominatorIn[49]), (sel[46] | DenominatorIn[48]), (sel[45] | DenominatorIn[47]), gnd_wire, (sel[43] | DenominatorIn[44]), (sel[42] | DenominatorIn[43]), (sel[41] | DenominatorIn[42]), (sel[40] | DenominatorIn[41]), (sel[39] | DenominatorIn[40]), (sel[38] | DenominatorIn[39]), (sel[37] | DenominatorIn[38]), (sel[36] | DenominatorIn[37]), (sel[35] | DenominatorIn[36]), (sel[34] | DenominatorIn[35]), (sel[33] | DenominatorIn[34]), (sel[32] | DenominatorIn[33]), (sel[31] | DenominatorIn[32]), (sel[30] | DenominatorIn[31]), (sel[29] | DenominatorIn[30]), (sel[28] | DenominatorIn[29]), (sel[27] | DenominatorIn[28]), (sel[26] | DenominatorIn[27]), (sel[25] | DenominatorIn[26]), (sel[24] | DenominatorIn[25]), (sel[23] | DenominatorIn[24]), gnd_wire, (sel[21] | DenominatorIn[21]), (sel[20] | DenominatorIn[20]), (sel[19] | DenominatorIn[19]), (sel[18] | DenominatorIn[18]), (sel[17] | DenominatorIn[17]), (sel[16] | DenominatorIn[16]), (sel[15] | DenominatorIn[15]), (sel[14] | DenominatorIn[14]), (sel[13]
 | DenominatorIn[13]), (sel[12] | DenominatorIn[12]), (sel[11] | DenominatorIn[11]), (sel[10] | DenominatorIn[10]), (sel[9] | DenominatorIn[9]), (sel[8] | DenominatorIn[8]), (sel[7] | DenominatorIn[7]), (sel[6] | DenominatorIn[6]), (sel[5] | DenominatorIn[5]), (sel[4] | DenominatorIn[4]), (sel[3] | DenominatorIn[3]), (sel[2] | DenominatorIn[2]), (sel[1] | DenominatorIn[1])},
		selnose = {(~ nose[1055]), (~ nose[1054]), (~ nose[1053]), (~ nose[1052]), (~ nose[1051]), (~ nose[1050]), (~ nose[1049]), (~ nose[1048]), (~ nose[1047]), (~ nose[1046]), ((~ nose[1045]) | sel[725]), ((~ nose[1044]) | sel[724]), ((~ nose[1043]) | sel[723]), ((~ nose[1042]) | sel[722]), ((~ nose[1041]) | sel[721]), ((~ nose[1040]) | sel[720]), ((~ nose[1039]) | sel[719]), ((~ nose[1038]) | sel[718]), ((~ nose[1037]) | sel[717]), ((~ nose[1036]) | sel[716]), ((~ nose[1035]) | sel[715]), ((~ nose[1034]) | sel[714]), ((~ nose[1033]) | sel[713]), ((~ nose[1032]) | sel[712]), ((~ nose[1031]) | sel[711]), ((~ nose[1030]) | sel[710]), ((~ nose[1029]) | sel[709]), ((~ nose[1028]) | sel[708]), ((~ nose[1027]) | sel[707]), ((~ nose[1026]) | sel[706]), ((~ nose[1025]) | sel[705]), ((~ nose[1024]) | sel[704]), (~ nose[1023]), (~ nose[1022]), (~ nose[1021]), (~ nose[1020]), (~ nose[1019]), (~ nose[1018]), (~ nose[1017]), (~ nose[1016]), (~ nose[1015]), (~ nose[1014]), ((~ nose[1013]) | sel[703]), ((~ nose[1012]) | sel[702]), ((~ nose[1011]) | sel[701]), ((~ nose[1010]) | sel[700]), ((~ nose[1009]) | sel[699]), ((~ nose[1008]) | sel[698]), ((~ nose[1007]) | sel[697]), ((~ nose[1006]) | sel[696]), ((~ nose[1005]) | sel[695]), ((~ nose[1004]) | sel[694]), ((~ nose[1003]) | sel[693]), ((~ nose[1002]) | sel[692]), ((~ nose[1001]) | sel[691]), ((~ nose[1000]) | sel[690]), ((~ nose[999]) | sel[689]), ((~ nose[998]) | sel[688]), ((~ nose[997]) | sel[687]), ((~ nose[996]) | sel[686]), ((~ nose[995]) | sel[685]), ((~ nose[994]) | sel[684]), ((~ nose[993]) | sel[683]), ((~ nose[992]) | sel[682]), (~ nose[991]), (~ nose[990]), (~ nose[989]), (~ nose[988]), (~ nose[987]), (~ nose[986]), (~ nose[985]), (~ nose[984]), (~ nose[983]), (~ nose[982]), ((~ nose[981]) | sel[681]), ((~ nose[980]) | sel[680]), ((~ nose[979]) | sel[679]), ((~ nose[978]) | sel[678]), ((~ nose[977]) | sel[677]), ((~ nose[976]) | sel[676]), ((~ nose[975]) | sel[675]), ((~ nose[974]) | sel[674]), ((~ nose[973]) | sel[673]), ((~ nose[972]) | sel[672]), ((~ nose[971]) | sel[671]
), ((~ nose[970]) | sel[670]), ((~ nose[969]) | sel[669]), ((~ nose[968]) | sel[668]), ((~ nose[967]) | sel[667]), ((~ nose[966]) | sel[666]), ((~ nose[965]) | sel[665]), ((~ nose[964]) | sel[664]), ((~ nose[963]) | sel[663]), ((~ nose[962]) | sel[662]), ((~ nose[961]) | sel[661]), ((~ nose[960]) | sel[660]), (~ nose[959]), (~ nose[958]), (~ nose[957]), (~ nose[956]), (~ nose[955]), (~ nose[954]), (~ nose[953]), (~ nose[952]), (~ nose[951]), (~ nose[950]), ((~ nose[949]) | sel[659]), ((~ nose[948]) | sel[658]), ((~ nose[947]) | sel[657]), ((~ nose[946]) | sel[656]), ((~ nose[945]) | sel[655]), ((~ nose[944]) | sel[654]), ((~ nose[943]) | sel[653]), ((~ nose[942]) | sel[652]), ((~ nose[941]) | sel[651]), ((~ nose[940]) | sel[650]), ((~ nose[939]) | sel[649]), ((~ nose[938]) | sel[648]), ((~ nose[937]) | sel[647]), ((~ nose[936]) | sel[646]), ((~ nose[935]) | sel[645]), ((~ nose[934]) | sel[644]), ((~ nose[933]) | sel[643]), ((~ nose[932]) | sel[642]), ((~ nose[931]) | sel[641]), ((~ nose[930]) | sel[640]), ((~ nose[929]) | sel[639]), ((~ nose[928]) | sel[638]), (~ nose[927]), (~ nose[926]), (~ nose[925]), (~ nose[924]), (~ nose[923]), (~ nose[922]), (~ nose[921]), (~ nose[920]), (~ nose[919]), (~ nose[918]), ((~ nose[917]) | sel[637]), ((~ nose[916]) | sel[636]), ((~ nose[915]) | sel[635]), ((~ nose[914]) | sel[634]), ((~ nose[913]) | sel[633]), ((~ nose[912]) | sel[632]), ((~ nose[911]) | sel[631]), ((~ nose[910]) | sel[630]), ((~ nose[909]) | sel[629]), ((~ nose[908]) | sel[628]), ((~ nose[907]) | sel[627]), ((~ nose[906]) | sel[626]), ((~ nose[905]) | sel[625]), ((~ nose[904]) | sel[624]), ((~ nose[903]) | sel[623]), ((~ nose[902]) | sel[622]), ((~ nose[901]) | sel[621]), ((~ nose[900]) | sel[620]), ((~ nose[899]) | sel[619]), ((~ nose[898]) | sel[618]), ((~ nose[897]) | sel[617]), ((~ nose[896]) | sel[616]), (~ nose[895]), (~ nose[894]), (~ nose[893]), (~ nose[892]), (~ nose[891]), (~ nose[890]), (~ nose[889]), (~ nose[888]), (~ nose[887]), (~ nose[886]), ((~ nose[885]) | sel[615]), ((~ nose[884]) | sel[614]),
 ((~ nose[883]) | sel[613]), ((~ nose[882]) | sel[612]), ((~ nose[881]) | sel[611]), ((~ nose[880]) | sel[610]), ((~ nose[879]) | sel[609]), ((~ nose[878]) | sel[608]), ((~ nose[877]) | sel[607]), ((~ nose[876]) | sel[606]), ((~ nose[875]) | sel[605]), ((~ nose[874]) | sel[604]), ((~ nose[873]) | sel[603]), ((~ nose[872]) | sel[602]), ((~ nose[871]) | sel[601]), ((~ nose[870]) | sel[600]), ((~ nose[869]) | sel[599]), ((~ nose[868]) | sel[598]), ((~ nose[867]) | sel[597]), ((~ nose[866]) | sel[596]), ((~ nose[865]) | sel[595]), ((~ nose[864]) | sel[594]), (~ nose[863]), (~ nose[862]), (~ nose[861]), (~ nose[860]), (~ nose[859]), (~ nose[858]), (~ nose[857]), (~ nose[856]), (~ nose[855]), (~ nose[854]), ((~ nose[853]) | sel[593]), ((~ nose[852]) | sel[592]), ((~ nose[851]) | sel[591]), ((~ nose[850]) | sel[590]), ((~ nose[849]) | sel[589]), ((~ nose[848]) | sel[588]), ((~ nose[847]) | sel[587]), ((~ nose[846]) | sel[586]), ((~ nose[845]) | sel[585]), ((~ nose[844]) | sel[584]), ((~ nose[843]) | sel[583]), ((~ nose[842]) | sel[582]), ((~ nose[841]) | sel[581]), ((~ nose[840]) | sel[580]), ((~ nose[839]) | sel[579]), ((~ nose[838]) | sel[578]), ((~ nose[837]) | sel[577]), ((~ nose[836]) | sel[576]), ((~ nose[835]) | sel[575]), ((~ nose[834]) | sel[574]), ((~ nose[833]) | sel[573]), ((~ nose[832]) | sel[572]), (~ nose[831]), (~ nose[830]), (~ nose[829]), (~ nose[828]), (~ nose[827]), (~ nose[826]), (~ nose[825]), (~ nose[824]), (~ nose[823]), (~ nose[822]), ((~ nose[821]) | sel[571]), ((~ nose[820]) | sel[570]), ((~ nose[819]) | sel[569]), ((~ nose[818]) | sel[568]), ((~ nose[817]) | sel[567]), ((~ nose[816]) | sel[566]), ((~ nose[815]) | sel[565]), ((~ nose[814]) | sel[564]), ((~ nose[813]) | sel[563]), ((~ nose[812]) | sel[562]), ((~ nose[811]) | sel[561]), ((~ nose[810]) | sel[560]), ((~ nose[809]) | sel[559]), ((~ nose[808]) | sel[558]), ((~ nose[807]) | sel[557]), ((~ nose[806]) | sel[556]), ((~ nose[805]) | sel[555]), ((~ nose[804]) | sel[554]), ((~ nose[803]) | sel[553]), ((~ nose[802]) | sel[552]), ((~ nose[801]
) | sel[551]), ((~ nose[800]) | sel[550]), (~ nose[799]), (~ nose[798]), (~ nose[797]), (~ nose[796]), (~ nose[795]), (~ nose[794]), (~ nose[793]), (~ nose[792]), (~ nose[791]), (~ nose[790]), ((~ nose[789]) | sel[549]), ((~ nose[788]) | sel[548]), ((~ nose[787]) | sel[547]), ((~ nose[786]) | sel[546]), ((~ nose[785]) | sel[545]), ((~ nose[784]) | sel[544]), ((~ nose[783]) | sel[543]), ((~ nose[782]) | sel[542]), ((~ nose[781]) | sel[541]), ((~ nose[780]) | sel[540]), ((~ nose[779]) | sel[539]), ((~ nose[778]) | sel[538]), ((~ nose[777]) | sel[537]), ((~ nose[776]) | sel[536]), ((~ nose[775]) | sel[535]), ((~ nose[774]) | sel[534]), ((~ nose[773]) | sel[533]), ((~ nose[772]) | sel[532]), ((~ nose[771]) | sel[531]), ((~ nose[770]) | sel[530]), ((~ nose[769]) | sel[529]), ((~ nose[768]) | sel[528]), (~ nose[767]), (~ nose[766]), (~ nose[765]), (~ nose[764]), (~ nose[763]), (~ nose[762]), (~ nose[761]), (~ nose[760]), (~ nose[759]), (~ nose[758]), ((~ nose[757]) | sel[527]), ((~ nose[756]) | sel[526]), ((~ nose[755]) | sel[525]), ((~ nose[754]) | sel[524]), ((~ nose[753]) | sel[523]), ((~ nose[752]) | sel[522]), ((~ nose[751]) | sel[521]), ((~ nose[750]) | sel[520]), ((~ nose[749]) | sel[519]), ((~ nose[748]) | sel[518]), ((~ nose[747]) | sel[517]), ((~ nose[746]) | sel[516]), ((~ nose[745]) | sel[515]), ((~ nose[744]) | sel[514]), ((~ nose[743]) | sel[513]), ((~ nose[742]) | sel[512]), ((~ nose[741]) | sel[511]), ((~ nose[740]) | sel[510]), ((~ nose[739]) | sel[509]), ((~ nose[738]) | sel[508]), ((~ nose[737]) | sel[507]), ((~ nose[736]) | sel[506]), (~ nose[735]), (~ nose[734]), (~ nose[733]), (~ nose[732]), (~ nose[731]), (~ nose[730]), (~ nose[729]), (~ nose[728]), (~ nose[727]), (~ nose[726]), ((~ nose[725]) | sel[505]), ((~ nose[724]) | sel[504]), ((~ nose[723]) | sel[503]), ((~ nose[722]) | sel[502]), ((~ nose[721]) | sel[501]), ((~ nose[720]) | sel[500]), ((~ nose[719]) | sel[499]), ((~ nose[718]) | sel[498]), ((~ nose[717]) | sel[497]), ((~ nose[716]) | sel[496]), ((~ nose[715]) | sel[495]), ((~ nose[714]) |
 sel[494]), ((~ nose[713]) | sel[493]), ((~ nose[712]) | sel[492]), ((~ nose[711]) | sel[491]), ((~ nose[710]) | sel[490]), ((~ nose[709]) | sel[489]), ((~ nose[708]) | sel[488]), ((~ nose[707]) | sel[487]), ((~ nose[706]) | sel[486]), ((~ nose[705]) | sel[485]), ((~ nose[704]) | sel[484]), (~ nose[703]), (~ nose[702]), (~ nose[701]), (~ nose[700]), (~ nose[699]), (~ nose[698]), (~ nose[697]), (~ nose[696]), (~ nose[695]), (~ nose[694]), ((~ nose[693]) | sel[483]), ((~ nose[692]) | sel[482]), ((~ nose[691]) | sel[481]), ((~ nose[690]) | sel[480]), ((~ nose[689]) | sel[479]), ((~ nose[688]) | sel[478]), ((~ nose[687]) | sel[477]), ((~ nose[686]) | sel[476]), ((~ nose[685]) | sel[475]), ((~ nose[684]) | sel[474]), ((~ nose[683]) | sel[473]), ((~ nose[682]) | sel[472]), ((~ nose[681]) | sel[471]), ((~ nose[680]) | sel[470]), ((~ nose[679]) | sel[469]), ((~ nose[678]) | sel[468]), ((~ nose[677]) | sel[467]), ((~ nose[676]) | sel[466]), ((~ nose[675]) | sel[465]), ((~ nose[674]) | sel[464]), ((~ nose[673]) | sel[463]), ((~ nose[672]) | sel[462]), (~ nose[671]), (~ nose[670]), (~ nose[669]), (~ nose[668]), (~ nose[667]), (~ nose[666]), (~ nose[665]), (~ nose[664]), (~ nose[663]), (~ nose[662]), ((~ nose[661]) | sel[461]), ((~ nose[660]) | sel[460]), ((~ nose[659]) | sel[459]), ((~ nose[658]) | sel[458]), ((~ nose[657]) | sel[457]), ((~ nose[656]) | sel[456]), ((~ nose[655]) | sel[455]), ((~ nose[654]) | sel[454]), ((~ nose[653]) | sel[453]), ((~ nose[652]) | sel[452]), ((~ nose[651]) | sel[451]), ((~ nose[650]) | sel[450]), ((~ nose[649]) | sel[449]), ((~ nose[648]) | sel[448]), ((~ nose[647]) | sel[447]), ((~ nose[646]) | sel[446]), ((~ nose[645]) | sel[445]), ((~ nose[644]) | sel[444]), ((~ nose[643]) | sel[443]), ((~ nose[642]) | sel[442]), ((~ nose[641]) | sel[441]), ((~ nose[640]) | sel[440]), (~ nose[639]), (~ nose[638]), (~ nose[637]), (~ nose[636]), (~ nose[635]), (~ nose[634]), (~ nose[633]), (~ nose[632]), (~ nose[631]), (~ nose[630]), ((~ nose[629]) | sel[439]), ((~ nose[628]) | sel[438]), ((~ nose[627]) | sel[437]
), ((~ nose[626]) | sel[436]), ((~ nose[625]) | sel[435]), ((~ nose[624]) | sel[434]), ((~ nose[623]) | sel[433]), ((~ nose[622]) | sel[432]), ((~ nose[621]) | sel[431]), ((~ nose[620]) | sel[430]), ((~ nose[619]) | sel[429]), ((~ nose[618]) | sel[428]), ((~ nose[617]) | sel[427]), ((~ nose[616]) | sel[426]), ((~ nose[615]) | sel[425]), ((~ nose[614]) | sel[424]), ((~ nose[613]) | sel[423]), ((~ nose[612]) | sel[422]), ((~ nose[611]) | sel[421]), ((~ nose[610]) | sel[420]), ((~ nose[609]) | sel[419]), ((~ nose[608]) | sel[418]), (~ nose[607]), (~ nose[606]), (~ nose[605]), (~ nose[604]), (~ nose[603]), (~ nose[602]), (~ nose[601]), (~ nose[600]), (~ nose[599]), (~ nose[598]), ((~ nose[597]) | sel[417]), ((~ nose[596]) | sel[416]), ((~ nose[595]) | sel[415]), ((~ nose[594]) | sel[414]), ((~ nose[593]) | sel[413]), ((~ nose[592]) | sel[412]), ((~ nose[591]) | sel[411]), ((~ nose[590]) | sel[410]), ((~ nose[589]) | sel[409]), ((~ nose[588]) | sel[408]), ((~ nose[587]) | sel[407]), ((~ nose[586]) | sel[406]), ((~ nose[585]) | sel[405]), ((~ nose[584]) | sel[404]), ((~ nose[583]) | sel[403]), ((~ nose[582]) | sel[402]), ((~ nose[581]) | sel[401]), ((~ nose[580]) | sel[400]), ((~ nose[579]) | sel[399]), ((~ nose[578]) | sel[398]), ((~ nose[577]) | sel[397]), ((~ nose[576]) | sel[396]), (~ nose[575]), (~ nose[574]), (~ nose[573]), (~ nose[572]), (~ nose[571]), (~ nose[570]), (~ nose[569]), (~ nose[568]), (~ nose[567]), (~ nose[566]), ((~ nose[565]) | sel[395]), ((~ nose[564]) | sel[394]), ((~ nose[563]) | sel[393]), ((~ nose[562]) | sel[392]), ((~ nose[561]) | sel[391]), ((~ nose[560]) | sel[390]), ((~ nose[559]) | sel[389]), ((~ nose[558]) | sel[388]), ((~ nose[557]) | sel[387]), ((~ nose[556]) | sel[386]), ((~ nose[555]) | sel[385]), ((~ nose[554]) | sel[384]), ((~ nose[553]) | sel[383]), ((~ nose[552]) | sel[382]), ((~ nose[551]) | sel[381]), ((~ nose[550]) | sel[380]), ((~ nose[549]) | sel[379]), ((~ nose[548]) | sel[378]), ((~ nose[547]) | sel[377]), ((~ nose[546]) | sel[376]), ((~ nose[545]) | sel[375]), ((~ nose[544]
) | sel[374]), (~ nose[543]), (~ nose[542]), (~ nose[541]), (~ nose[540]), (~ nose[539]), (~ nose[538]), (~ nose[537]), (~ nose[536]), (~ nose[535]), (~ nose[534]), ((~ nose[533]) | sel[373]), ((~ nose[532]) | sel[372]), ((~ nose[531]) | sel[371]), ((~ nose[530]) | sel[370]), ((~ nose[529]) | sel[369]), ((~ nose[528]) | sel[368]), ((~ nose[527]) | sel[367]), ((~ nose[526]) | sel[366]), ((~ nose[525]) | sel[365]), ((~ nose[524]) | sel[364]), ((~ nose[523]) | sel[363]), ((~ nose[522]) | sel[362]), ((~ nose[521]) | sel[361]), ((~ nose[520]) | sel[360]), ((~ nose[519]) | sel[359]), ((~ nose[518]) | sel[358]), ((~ nose[517]) | sel[357]), ((~ nose[516]) | sel[356]), ((~ nose[515]) | sel[355]), ((~ nose[514]) | sel[354]), ((~ nose[513]) | sel[353]), ((~ nose[512]) | sel[352]), (~ nose[511]), (~ nose[510]), (~ nose[509]), (~ nose[508]), (~ nose[507]), (~ nose[506]), (~ nose[505]), (~ nose[504]), (~ nose[503]), (~ nose[502]), ((~ nose[501]) | sel[351]), ((~ nose[500]) | sel[350]), ((~ nose[499]) | sel[349]), ((~ nose[498]) | sel[348]), ((~ nose[497]) | sel[347]), ((~ nose[496]) | sel[346]), ((~ nose[495]) | sel[345]), ((~ nose[494]) | sel[344]), ((~ nose[493]) | sel[343]), ((~ nose[492]) | sel[342]), ((~ nose[491]) | sel[341]), ((~ nose[490]) | sel[340]), ((~ nose[489]) | sel[339]), ((~ nose[488]) | sel[338]), ((~ nose[487]) | sel[337]), ((~ nose[486]) | sel[336]), ((~ nose[485]) | sel[335]), ((~ nose[484]) | sel[334]), ((~ nose[483]) | sel[333]), ((~ nose[482]) | sel[332]), ((~ nose[481]) | sel[331]), ((~ nose[480]) | sel[330]), (~ nose[479]), (~ nose[478]), (~ nose[477]), (~ nose[476]), (~ nose[475]), (~ nose[474]), (~ nose[473]), (~ nose[472]), (~ nose[471]), (~ nose[470]), ((~ nose[469]) | sel[329]), ((~ nose[468]) | sel[328]), ((~ nose[467]) | sel[327]), ((~ nose[466]) | sel[326]), ((~ nose[465]) | sel[325]), ((~ nose[464]) | sel[324]), ((~ nose[463]) | sel[323]), ((~ nose[462]) | sel[322]), ((~ nose[461]) | sel[321]), ((~ nose[460]) | sel[320]), ((~ nose[459]) | sel[319]), ((~ nose[458]) | sel[318]), ((~ nose[457]) |
 sel[317]), ((~ nose[456]) | sel[316]), ((~ nose[455]) | sel[315]), ((~ nose[454]) | sel[314]), ((~ nose[453]) | sel[313]), ((~ nose[452]) | sel[312]), ((~ nose[451]) | sel[311]), ((~ nose[450]) | sel[310]), ((~ nose[449]) | sel[309]), ((~ nose[448]) | sel[308]), (~ nose[447]), (~ nose[446]), (~ nose[445]), (~ nose[444]), (~ nose[443]), (~ nose[442]), (~ nose[441]), (~ nose[440]), (~ nose[439]), (~ nose[438]), ((~ nose[437]) | sel[307]), ((~ nose[436]) | sel[306]), ((~ nose[435]) | sel[305]), ((~ nose[434]) | sel[304]), ((~ nose[433]) | sel[303]), ((~ nose[432]) | sel[302]), ((~ nose[431]) | sel[301]), ((~ nose[430]) | sel[300]), ((~ nose[429]) | sel[299]), ((~ nose[428]) | sel[298]), ((~ nose[427]) | sel[297]), ((~ nose[426]) | sel[296]), ((~ nose[425]) | sel[295]), ((~ nose[424]) | sel[294]), ((~ nose[423]) | sel[293]), ((~ nose[422]) | sel[292]), ((~ nose[421]) | sel[291]), ((~ nose[420]) | sel[290]), ((~ nose[419]) | sel[289]), ((~ nose[418]) | sel[288]), ((~ nose[417]) | sel[287]), ((~ nose[416]) | sel[286]), (~ nose[415]), (~ nose[414]), (~ nose[413]), (~ nose[412]), (~ nose[411]), (~ nose[410]), (~ nose[409]), (~ nose[408]), (~ nose[407]), (~ nose[406]), ((~ nose[405]) | sel[285]), ((~ nose[404]) | sel[284]), ((~ nose[403]) | sel[283]), ((~ nose[402]) | sel[282]), ((~ nose[401]) | sel[281]), ((~ nose[400]) | sel[280]), ((~ nose[399]) | sel[279]), ((~ nose[398]) | sel[278]), ((~ nose[397]) | sel[277]), ((~ nose[396]) | sel[276]), ((~ nose[395]) | sel[275]), ((~ nose[394]) | sel[274]), ((~ nose[393]) | sel[273]), ((~ nose[392]) | sel[272]), ((~ nose[391]) | sel[271]), ((~ nose[390]) | sel[270]), ((~ nose[389]) | sel[269]), ((~ nose[388]) | sel[268]), ((~ nose[387]) | sel[267]), ((~ nose[386]) | sel[266]), ((~ nose[385]) | sel[265]), ((~ nose[384]) | sel[264]), (~ nose[383]), (~ nose[382]), (~ nose[381]), (~ nose[380]), (~ nose[379]), (~ nose[378]), (~ nose[377]), (~ nose[376]), (~ nose[375]), (~ nose[374]), ((~ nose[373]) | sel[263]), ((~ nose[372]) | sel[262]), ((~ nose[371]) | sel[261]), ((~ nose[370]) | sel[260]
), ((~ nose[369]) | sel[259]), ((~ nose[368]) | sel[258]), ((~ nose[367]) | sel[257]), ((~ nose[366]) | sel[256]), ((~ nose[365]) | sel[255]), ((~ nose[364]) | sel[254]), ((~ nose[363]) | sel[253]), ((~ nose[362]) | sel[252]), ((~ nose[361]) | sel[251]), ((~ nose[360]) | sel[250]), ((~ nose[359]) | sel[249]), ((~ nose[358]) | sel[248]), ((~ nose[357]) | sel[247]), ((~ nose[356]) | sel[246]), ((~ nose[355]) | sel[245]), ((~ nose[354]) | sel[244]), ((~ nose[353]) | sel[243]), ((~ nose[352]) | sel[242]), (~ nose[351]), (~ nose[350]), (~ nose[349]), (~ nose[348]), (~ nose[347]), (~ nose[346]), (~ nose[345]), (~ nose[344]), (~ nose[343]), (~ nose[342]), ((~ nose[341]) | sel[241]), ((~ nose[340]) | sel[240]), ((~ nose[339]) | sel[239]), ((~ nose[338]) | sel[238]), ((~ nose[337]) | sel[237]), ((~ nose[336]) | sel[236]), ((~ nose[335]) | sel[235]), ((~ nose[334]) | sel[234]), ((~ nose[333]) | sel[233]), ((~ nose[332]) | sel[232]), ((~ nose[331]) | sel[231]), ((~ nose[330]) | sel[230]), ((~ nose[329]) | sel[229]), ((~ nose[328]) | sel[228]), ((~ nose[327]) | sel[227]), ((~ nose[326]) | sel[226]), ((~ nose[325]) | sel[225]), ((~ nose[324]) | sel[224]), ((~ nose[323]) | sel[223]), ((~ nose[322]) | sel[222]), ((~ nose[321]) | sel[221]), ((~ nose[320]) | sel[220]), (~ nose[319]), (~ nose[318]), (~ nose[317]), (~ nose[316]), (~ nose[315]), (~ nose[314]), (~ nose[313]), (~ nose[312]), (~ nose[311]), (~ nose[310]), ((~ nose[309]) | sel[219]), ((~ nose[308]) | sel[218]), ((~ nose[307]) | sel[217]), ((~ nose[306]) | sel[216]), ((~ nose[305]) | sel[215]), ((~ nose[304]) | sel[214]), ((~ nose[303]) | sel[213]), ((~ nose[302]) | sel[212]), ((~ nose[301]) | sel[211]), ((~ nose[300]) | sel[210]), ((~ nose[299]) | sel[209]), ((~ nose[298]) | sel[208]), ((~ nose[297]) | sel[207]), ((~ nose[296]) | sel[206]), ((~ nose[295]) | sel[205]), ((~ nose[294]) | sel[204]), ((~ nose[293]) | sel[203]), ((~ nose[292]) | sel[202]), ((~ nose[291]) | sel[201]), ((~ nose[290]) | sel[200]), ((~ nose[289]) | sel[199]), ((~ nose[288]) | sel[198]), (~ nose[287]
), (~ nose[286]), (~ nose[285]), (~ nose[284]), (~ nose[283]), (~ nose[282]), (~ nose[281]), (~ nose[280]), (~ nose[279]), (~ nose[278]), ((~ nose[277]) | sel[197]), ((~ nose[276]) | sel[196]), ((~ nose[275]) | sel[195]), ((~ nose[274]) | sel[194]), ((~ nose[273]) | sel[193]), ((~ nose[272]) | sel[192]), ((~ nose[271]) | sel[191]), ((~ nose[270]) | sel[190]), ((~ nose[269]) | sel[189]), ((~ nose[268]) | sel[188]), ((~ nose[267]) | sel[187]), ((~ nose[266]) | sel[186]), ((~ nose[265]) | sel[185]), ((~ nose[264]) | sel[184]), ((~ nose[263]) | sel[183]), ((~ nose[262]) | sel[182]), ((~ nose[261]) | sel[181]), ((~ nose[260]) | sel[180]), ((~ nose[259]) | sel[179]), ((~ nose[258]) | sel[178]), ((~ nose[257]) | sel[177]), ((~ nose[256]) | sel[176]), (~ nose[255]), (~ nose[254]), (~ nose[253]), (~ nose[252]), (~ nose[251]), (~ nose[250]), (~ nose[249]), (~ nose[248]), (~ nose[247]), (~ nose[246]), ((~ nose[245]) | sel[175]), ((~ nose[244]) | sel[174]), ((~ nose[243]) | sel[173]), ((~ nose[242]) | sel[172]), ((~ nose[241]) | sel[171]), ((~ nose[240]) | sel[170]), ((~ nose[239]) | sel[169]), ((~ nose[238]) | sel[168]), ((~ nose[237]) | sel[167]), ((~ nose[236]) | sel[166]), ((~ nose[235]) | sel[165]), ((~ nose[234]) | sel[164]), ((~ nose[233]) | sel[163]), ((~ nose[232]) | sel[162]), ((~ nose[231]) | sel[161]), ((~ nose[230]) | sel[160]), ((~ nose[229]) | sel[159]), ((~ nose[228]) | sel[158]), ((~ nose[227]) | sel[157]), ((~ nose[226]) | sel[156]), ((~ nose[225]) | sel[155]), ((~ nose[224]) | sel[154]), (~ nose[223]), (~ nose[222]), (~ nose[221]), (~ nose[220]), (~ nose[219]), (~ nose[218]), (~ nose[217]), (~ nose[216]), (~ nose[215]), (~ nose[214]), ((~ nose[213]) | sel[153]), ((~ nose[212]) | sel[152]), ((~ nose[211]) | sel[151]), ((~ nose[210]) | sel[150]), ((~ nose[209]) | sel[149]), ((~ nose[208]) | sel[148]), ((~ nose[207]) | sel[147]), ((~ nose[206]) | sel[146]), ((~ nose[205]) | sel[145]), ((~ nose[204]) | sel[144]), ((~ nose[203]) | sel[143]), ((~ nose[202]) | sel[142]), ((~ nose[201]) | sel[141]), ((~ nose[200])
 | sel[140]), ((~ nose[199]) | sel[139]), ((~ nose[198]) | sel[138]), ((~ nose[197]) | sel[137]), ((~ nose[196]) | sel[136]), ((~ nose[195]) | sel[135]), ((~ nose[194]) | sel[134]), ((~ nose[193]) | sel[133]), ((~ nose[192]) | sel[132]), (~ nose[191]), (~ nose[190]), (~ nose[189]), (~ nose[188]), (~ nose[187]), (~ nose[186]), (~ nose[185]), (~ nose[184]), (~ nose[183]), (~ nose[182]), ((~ nose[181]) | sel[131]), ((~ nose[180]) | sel[130]), ((~ nose[179]) | sel[129]), ((~ nose[178]) | sel[128]), ((~ nose[177]) | sel[127]), ((~ nose[176]) | sel[126]), ((~ nose[175]) | sel[125]), ((~ nose[174]) | sel[124]), ((~ nose[173]) | sel[123]), ((~ nose[172]) | sel[122]), ((~ nose[171]) | sel[121]), ((~ nose[170]) | sel[120]), ((~ nose[169]) | sel[119]), ((~ nose[168]) | sel[118]), ((~ nose[167]) | sel[117]), ((~ nose[166]) | sel[116]), ((~ nose[165]) | sel[115]), ((~ nose[164]) | sel[114]), ((~ nose[163]) | sel[113]), ((~ nose[162]) | sel[112]), ((~ nose[161]) | sel[111]), ((~ nose[160]) | sel[110]), (~ nose[159]), (~ nose[158]), (~ nose[157]), (~ nose[156]), (~ nose[155]), (~ nose[154]), (~ nose[153]), (~ nose[152]), (~ nose[151]), (~ nose[150]), ((~ nose[149]) | sel[109]), ((~ nose[148]) | sel[108]), ((~ nose[147]) | sel[107]), ((~ nose[146]) | sel[106]), ((~ nose[145]) | sel[105]), ((~ nose[144]) | sel[104]), ((~ nose[143]) | sel[103]), ((~ nose[142]) | sel[102]), ((~ nose[141]) | sel[101]), ((~ nose[140]) | sel[100]), ((~ nose[139]) | sel[99]), ((~ nose[138]) | sel[98]), ((~ nose[137]) | sel[97]), ((~ nose[136]) | sel[96]), ((~ nose[135]) | sel[95]), ((~ nose[134]) | sel[94]), ((~ nose[133]) | sel[93]), ((~ nose[132]) | sel[92]), ((~ nose[131]) | sel[91]), ((~ nose[130]) | sel[90]), ((~ nose[129]) | sel[89]), ((~ nose[128]) | sel[88]), (~ nose[127]), (~ nose[126]), (~ nose[125]), (~ nose[124]), (~ nose[123]), (~ nose[122]), (~ nose[121]), (~ nose[120]), (~ nose[119]), (~ nose[118]), ((~ nose[117]) | sel[87]), ((~ nose[116]) | sel[86]), ((~ nose[115]) | sel[85]), ((~ nose[114]) | sel[84]), ((~ nose[113]) | sel[83]), ((~ nose[112]
) | sel[82]), ((~ nose[111]) | sel[81]), ((~ nose[110]) | sel[80]), ((~ nose[109]) | sel[79]), ((~ nose[108]) | sel[78]), ((~ nose[107]) | sel[77]), ((~ nose[106]) | sel[76]), ((~ nose[105]) | sel[75]), ((~ nose[104]) | sel[74]), ((~ nose[103]) | sel[73]), ((~ nose[102]) | sel[72]), ((~ nose[101]) | sel[71]), ((~ nose[100]) | sel[70]), ((~ nose[99]) | sel[69]), ((~ nose[98]) | sel[68]), ((~ nose[97]) | sel[67]), ((~ nose[96]) | sel[66]), (~ nose[95]), (~ nose[94]), (~ nose[93]), (~ nose[92]), (~ nose[91]), (~ nose[90]), (~ nose[89]), (~ nose[88]), (~ nose[87]), (~ nose[86]), ((~ nose[85]) | sel[65]), ((~ nose[84]) | sel[64]), ((~ nose[83]) | sel[63]), ((~ nose[82]) | sel[62]), ((~ nose[81]) | sel[61]), ((~ nose[80]) | sel[60]), ((~ nose[79]) | sel[59]), ((~ nose[78]) | sel[58]), ((~ nose[77]) | sel[57]), ((~ nose[76]) | sel[56]), ((~ nose[75]) | sel[55]), ((~ nose[74]) | sel[54]), ((~ nose[73]) | sel[53]), ((~ nose[72]) | sel[52]), ((~ nose[71]) | sel[51]), ((~ nose[70]) | sel[50]), ((~ nose[69]) | sel[49]), ((~ nose[68]) | sel[48]), ((~ nose[67]) | sel[47]), ((~ nose[66]) | sel[46]), ((~ nose[65]) | sel[45]), ((~ nose[64]) | sel[44]), (~ nose[63]), (~ nose[62]), (~ nose[61]), (~ nose[60]), (~ nose[59]), (~ nose[58]), (~ nose[57]), (~ nose[56]), (~ nose[55]), (~ nose[54]), ((~ nose[53]) | sel[43]), ((~ nose[52]) | sel[42]), ((~ nose[51]) | sel[41]), ((~ nose[50]) | sel[40]), ((~ nose[49]) | sel[39]), ((~ nose[48]) | sel[38]), ((~ nose[47]) | sel[37]), ((~ nose[46]) | sel[36]), ((~ nose[45]) | sel[35]), ((~ nose[44]) | sel[34]), ((~ nose[43]) | sel[33]), ((~ nose[42]) | sel[32]), ((~ nose[41]) | sel[31]), ((~ nose[40]) | sel[30]), ((~ nose[39]) | sel[29]), ((~ nose[38]) | sel[28]), ((~ nose[37]) | sel[27]), ((~ nose[36]) | sel[26]), ((~ nose[35]) | sel[25]), ((~ nose[34]) | sel[24]), ((~ nose[33]) | sel[23]), ((~ nose[32]) | sel[22]), (~ nose[31]), (~ nose[30]), (~ nose[29]), (~ nose[28]), (~ nose[27]), (~ nose[26]), (~ nose[25]), (~ nose[24]), (~ nose[23]), (~ nose[22]), ((~ nose[21]) | sel[21]), ((~ nose[20]) | sel[20]
), ((~ nose[19]) | sel[19]), ((~ nose[18]) | sel[18]), ((~ nose[17]) | sel[17]), ((~ nose[16]) | sel[16]), ((~ nose[15]) | sel[15]), ((~ nose[14]) | sel[14]), ((~ nose[13]) | sel[13]), ((~ nose[12]) | sel[12]), ((~ nose[11]) | sel[11]), ((~ nose[10]) | sel[10]), ((~ nose[9]) | sel[9]), ((~ nose[8]) | sel[8]), ((~ nose[7]) | sel[7]), ((~ nose[6]) | sel[6]), ((~ nose[5]) | sel[5]), ((~ nose[4]) | sel[4]), ((~ nose[3]) | sel[3]), ((~ nose[2]) | sel[2]), ((~ nose[1]) | sel[1]), ((~ nose[0]) | sel[0])},
		StageIn = StageIn_tmp,
		StageIn_tmp = {StageOut[735:690], DFFStage[137:115], StageOut[666:552], DFFStage[114:92], StageOut[528:437], DFFStage[91:69], StageOut[413:322], DFFStage[68:46], StageOut[298:184], DFFStage[45:23], StageOut[160:69], DFFStage[22:0], StageOut[45:0], {23{1'b0}}},
		StageOut = {(({StageIn[734:713], NumeratorIn[992]} & {23{selnose[1023]}}) | (prestg[735:713] & {23{(~ selnose[1023])}})), (({StageIn[711:690], NumeratorIn[961]} & {23{selnose[990]}}) | (prestg[712:690] & {23{(~ selnose[990])}})), (({StageIn[688:667], NumeratorIn[930]} & {23{selnose[957]}}) | (prestg[689:667] & {23{(~ selnose[957])}})), (({StageIn[665:644], NumeratorIn[899]} & {23{selnose[924]}}) | (prestg[666:644] & {23{(~ selnose[924])}})), (({StageIn[642:621], NumeratorIn[868]} & {23{selnose[891]}}) | (prestg[643:621] & {23{(~ selnose[891])}})), (({StageIn[619:598], NumeratorIn[837]} & {23{selnose[858]}}) | (prestg[620:598] & {23{(~ selnose[858])}})), (({StageIn[596:575], NumeratorIn[806]} & {23{selnose[825]}}) | (prestg[597:575] & {23{(~ selnose[825])}})), (({StageIn[573:552], NumeratorIn[775]} & {23{selnose[792]}}) | (prestg[574:552] & {23{(~ selnose[792])}})), (({StageIn[550:529], NumeratorIn[744]} & {23{selnose[759]}}) | (prestg[551:529] & {23{(~ selnose[759])}})), (({StageIn[527:506], NumeratorIn[713]} & {23{selnose[726]}}) | (prestg[528:506] & {23{(~ selnose[726])}})), (({StageIn[504:483], NumeratorIn[682]} & {23{selnose[693]}}) | (prestg[505:483] & {23{(~ selnose[693])}})), (({StageIn[481:460], NumeratorIn[651]} & {23{selnose[660]}}) | (prestg[482:460] & {23{(~ selnose[660])}})), (({StageIn[458:437], NumeratorIn[620]} & {23{selnose[627]}}) | (prestg[459:437] & {23{(~ selnose[627])}})), (({StageIn[435:414], NumeratorIn[589]} & {23{selnose[594]}}) | (prestg[436:414] & {23{(~ selnose[594])}})), (({StageIn[412:391], NumeratorIn[558]} & {23{selnose[561]}}) | (prestg[413:391] & {23{(~ selnose[561])}})), (({StageIn[389:368], NumeratorIn[527]} & {23{selnose[528]}}) | (prestg[390:368] & {23{(~ selnose[528])}})), (({StageIn[366:345], NumeratorIn[496]} & {23{selnose[495]}}) | (prestg[367:345] & {23{(~ selnose[495])}})), (({StageIn[343:322], NumeratorIn[465]} & {23{selnose[462]}}) | (prestg[344:322] & {23{(~ selnose[462])}})), (({StageIn[320:299], NumeratorIn[434]} & {23{selnose[429]}}) | (prestg[321:299] & {23{(~
 selnose[429])}})), (({StageIn[297:276], NumeratorIn[403]} & {23{selnose[396]}}) | (prestg[298:276] & {23{(~ selnose[396])}})), (({StageIn[274:253], NumeratorIn[372]} & {23{selnose[363]}}) | (prestg[275:253] & {23{(~ selnose[363])}})), (({StageIn[251:230], NumeratorIn[341]} & {23{selnose[330]}}) | (prestg[252:230] & {23{(~ selnose[330])}})), (({StageIn[228:207], NumeratorIn[310]} & {23{selnose[297]}}) | (prestg[229:207] & {23{(~ selnose[297])}})), (({StageIn[205:184], NumeratorIn[279]} & {23{selnose[264]}}) | (prestg[206:184] & {23{(~ selnose[264])}})), (({StageIn[182:161], NumeratorIn[248]} & {23{selnose[231]}}) | (prestg[183:161] & {23{(~ selnose[231])}})), (({StageIn[159:138], NumeratorIn[217]} & {23{selnose[198]}}) | (prestg[160:138] & {23{(~ selnose[198])}})), (({StageIn[136:115], NumeratorIn[186]} & {23{selnose[165]}}) | (prestg[137:115] & {23{(~ selnose[165])}})), (({StageIn[113:92], NumeratorIn[155]} & {23{selnose[132]}}) | (prestg[114:92] & {23{(~ selnose[132])}})), (({StageIn[90:69], NumeratorIn[124]} & {23{selnose[99]}}) | (prestg[91:69] & {23{(~ selnose[99])}})), (({StageIn[67:46], NumeratorIn[93]} & {23{selnose[66]}}) | (prestg[68:46] & {23{(~ selnose[66])}})), (({StageIn[44:23], NumeratorIn[62]} & {23{selnose[33]}}) | (prestg[45:23] & {23{(~ selnose[33])}})), (({StageIn[21:0], NumeratorIn[31]} & {23{selnose[0]}}) | (prestg[22:0] & {23{(~ selnose[0])}}))},
		vcc_wire = 1'b1;
endmodule //div6_alt_u_div


//lpm_abs DEVICE_FAMILY="Cyclone V" LPM_WIDTH=22 data result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_abs 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_WIDTH=22 cin dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = lut 22 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div6_lpm_abs
	( 
	data,
	overflow,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [21:0]  data;
	output   overflow;
	output   [21:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [21:0]  data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[22:0]	wire_adder_result_int;
	wire	wire_adder_cin;
	wire	[21:0]	wire_adder_dataa;
	wire	[21:0]	wire_adder_datab;
	wire	[21:0]	wire_adder_result;
	wire  gnd_wire;
	wire  [21:0]  result_tmp;

	assign
		wire_adder_result_int = {wire_adder_dataa, wire_adder_cin} + {wire_adder_datab, wire_adder_cin};
	assign
		wire_adder_result = wire_adder_result_int[22:1];
	assign
		wire_adder_cin = data[21],
		wire_adder_dataa = (data ^ {22{data[21]}}),
		wire_adder_datab = {22{gnd_wire}};
	assign
		gnd_wire = 1'b0,
		overflow = (result_tmp[21] & data[21]),
		result = result_tmp,
		result_tmp = wire_adder_result;
endmodule //div6_lpm_abs


//lpm_abs DEVICE_FAMILY="Cyclone V" LPM_WIDTH=32 data result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_abs 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_WIDTH=32 cin dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = lut 32 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div6_lpm_abs1
	( 
	data,
	overflow,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  data;
	output   overflow;
	output   [31:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [31:0]  data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[32:0]	wire_adder_result_int;
	wire	wire_adder_cin;
	wire	[31:0]	wire_adder_dataa;
	wire	[31:0]	wire_adder_datab;
	wire	[31:0]	wire_adder_result;
	wire  gnd_wire;
	wire  [31:0]  result_tmp;

	assign
		wire_adder_result_int = {wire_adder_dataa, wire_adder_cin} + {wire_adder_datab, wire_adder_cin};
	assign
		wire_adder_result = wire_adder_result_int[32:1];
	assign
		wire_adder_cin = data[31],
		wire_adder_dataa = (data ^ {32{data[31]}}),
		wire_adder_datab = {32{gnd_wire}};
	assign
		gnd_wire = 1'b0,
		overflow = (result_tmp[31] & data[31]),
		result = result_tmp,
		result_tmp = wire_adder_result;
endmodule //div6_lpm_abs1


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=32 cin dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=22 cin dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = lut 623 reg 666 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div6_abs_divider
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [21:0]  denominator;
	input   [31:0]  numerator;
	output   [31:0]  quotient;
	output   [21:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [31:0]   wire_divider_quotient;
	wire  [21:0]   wire_divider_remainder;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=HIGH"} *)
	reg	[5:0]	DFF_diff_signs;
	reg	[5:0]	DFF_num_sign;
	wire  wire_my_abs_den_overflow;
	wire  [21:0]   wire_my_abs_den_result;
	wire  wire_my_abs_num_overflow;
	wire  [31:0]   wire_my_abs_num_result;
	wire	[32:0]	wire_compl_add_quot_result_int;
	wire	wire_compl_add_quot_cin;
	wire	[31:0]	wire_compl_add_quot_dataa;
	wire	[31:0]	wire_compl_add_quot_datab;
	wire	[31:0]	wire_compl_add_quot_result;
	wire	[22:0]	wire_compl_add_rem_result_int;
	wire	wire_compl_add_rem_cin;
	wire	[21:0]	wire_compl_add_rem_dataa;
	wire	[21:0]	wire_compl_add_rem_datab;
	wire	[21:0]	wire_compl_add_rem_result;
	wire aclr;
	wire clk_en;
	wire  dff_num_sign_q_out;
	wire  diff_signs;
	wire  gnd_wire;
	wire  [31:0]  neg_quot;
	wire  [21:0]  neg_rem;
	wire  [21:0]  norm_den;
	wire  [31:0]  norm_num;
	wire  num_sign;
	wire  [31:0]  protect_quotient;
	wire  [21:0]  protect_remainder;
	wire  vcc_wire;

	div6_alt_u_div   divider
	( 
	.clock(clock),
	.denominator(norm_den),
	.numerator(norm_num),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	// synopsys translate_off
	initial
		DFF_diff_signs = {6{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFF_diff_signs <= {6{1'b1}};
		else if  (clk_en == 1'b1)   DFF_diff_signs <= {{diff_signs, DFF_diff_signs[5:1]}};
	// synopsys translate_off
	initial
		DFF_num_sign = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFF_num_sign <= 6'b0;
		else if  (clk_en == 1'b1)   DFF_num_sign <= {{num_sign, DFF_num_sign[5:1]}};
	div6_lpm_abs   my_abs_den
	( 
	.data(denominator),
	.overflow(wire_my_abs_den_overflow),
	.result(wire_my_abs_den_result));
	div6_lpm_abs1   my_abs_num
	( 
	.data(numerator),
	.overflow(wire_my_abs_num_overflow),
	.result(wire_my_abs_num_result));
	assign
		wire_compl_add_quot_result_int = {wire_compl_add_quot_dataa, wire_compl_add_quot_cin} + {wire_compl_add_quot_datab, wire_compl_add_quot_cin};
	assign
		wire_compl_add_quot_result = wire_compl_add_quot_result_int[32:1];
	assign
		wire_compl_add_quot_cin = vcc_wire,
		wire_compl_add_quot_dataa = (~ protect_quotient),
		wire_compl_add_quot_datab = {32{gnd_wire}};
	assign
		wire_compl_add_rem_result_int = {wire_compl_add_rem_dataa, wire_compl_add_rem_cin} + {wire_compl_add_rem_datab, wire_compl_add_rem_cin};
	assign
		wire_compl_add_rem_result = wire_compl_add_rem_result_int[22:1];
	assign
		wire_compl_add_rem_cin = vcc_wire,
		wire_compl_add_rem_dataa = (~ protect_remainder),
		wire_compl_add_rem_datab = {22{gnd_wire}};
	assign
		aclr = 1'b0,
		clk_en = 1'b1,
		dff_num_sign_q_out = DFF_num_sign[0],
		diff_signs = (numerator[31] ^ denominator[21]),
		gnd_wire = 1'b0,
		neg_quot = wire_compl_add_quot_result,
		neg_rem = wire_compl_add_rem_result,
		norm_den = wire_my_abs_den_result,
		norm_num = wire_my_abs_num_result,
		num_sign = numerator[31],
		protect_quotient = wire_divider_quotient,
		protect_remainder = wire_divider_remainder,
		quotient = ((protect_quotient & {32{(~ DFF_diff_signs[0])}}) | (neg_quot & {32{DFF_diff_signs[0]}})),
		remainder = ((protect_remainder & {22{(~ dff_num_sign_q_out)}}) | (neg_rem & {22{dff_num_sign_q_out}})),
		vcc_wire = 1'b1;
endmodule //div6_abs_divider

//synthesis_resources = lut 623 reg 666 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div6_lpm_divide
	( 
	clock,
	denom,
	numer,
	quotient,
	remain) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [21:0]  denom;
	input   [31:0]  numer;
	output   [31:0]  quotient;
	output   [21:0]  remain;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [31:0]   wire_divider_quotient;
	wire  [21:0]   wire_divider_remainder;
	wire  [31:0]  numer_tmp;

	div6_abs_divider   divider
	( 
	.clock(clock),
	.denominator(denom),
	.numerator(numer_tmp),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		numer_tmp = numer,
		quotient = wire_divider_quotient,
		remain = wire_divider_remainder;
endmodule //div6_lpm_divide
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module div6 (
	clock,
	denom,
	numer,
	quotient,
	remain)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[21:0]  denom;
	input	[31:0]  numer;
	output	[31:0]  quotient;
	output	[21:0]  remain;

	wire [31:0] sub_wire0;
	wire [21:0] sub_wire1;
	wire [31:0] quotient = sub_wire0[31:0];
	wire [21:0] remain = sub_wire1[21:0];

	div6_lpm_divide	div6_lpm_divide_component (
				.clock (clock),
				.denom (denom),
				.numer (numer),
				.quotient (sub_wire0),
				.remain (sub_wire1));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: PRIVATE: PRIVATE_LPM_REMAINDERPOSITIVE STRING "FALSE"
// Retrieval info: PRIVATE: PRIVATE_MAXIMIZE_SPEED NUMERIC "6"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: USING_PIPELINE NUMERIC "1"
// Retrieval info: PRIVATE: VERSION_NUMBER NUMERIC "2"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_DREPRESENTATION STRING "SIGNED"
// Retrieval info: CONSTANT: LPM_HINT STRING "MAXIMIZE_SPEED=6,LPM_REMAINDERPOSITIVE=FALSE"
// Retrieval info: CONSTANT: LPM_NREPRESENTATION STRING "SIGNED"
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "6"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_DIVIDE"
// Retrieval info: CONSTANT: LPM_WIDTHD NUMERIC "22"
// Retrieval info: CONSTANT: LPM_WIDTHN NUMERIC "32"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: denom 0 0 22 0 INPUT NODEFVAL "denom[21..0]"
// Retrieval info: USED_PORT: numer 0 0 32 0 INPUT NODEFVAL "numer[31..0]"
// Retrieval info: USED_PORT: quotient 0 0 32 0 OUTPUT NODEFVAL "quotient[31..0]"
// Retrieval info: USED_PORT: remain 0 0 22 0 OUTPUT NODEFVAL "remain[21..0]"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @denom 0 0 22 0 denom 0 0 22 0
// Retrieval info: CONNECT: @numer 0 0 32 0 numer 0 0 32 0
// Retrieval info: CONNECT: quotient 0 0 32 0 @quotient 0 0 32 0
// Retrieval info: CONNECT: remain 0 0 22 0 @remain 0 0 22 0
// Retrieval info: GEN_FILE: TYPE_NORMAL div6.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div6.inc TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div6.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div6.bsf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div6_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div6_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div6_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
